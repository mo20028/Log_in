
safe_system2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00002e8c  00002f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800116  00800116  00002fd6  2**0
                  ALLOC
  3 .stab         00002dcc  00000000  00000000  00002fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001042  00000000  00000000  00005da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000070d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000911a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 31       	cpi	r26, 0x1B	; 27
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 16 	call	0x2c22	; 0x2c22 <main>
      8a:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ef       	ldi	r26, 0xF6	; 246
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ef       	ldi	r24, 0xF6	; 246
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ef       	ldi	r22, 0xF6	; 246
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <CLCD_voidSendCommand>:
#include  "CLCD_config.h"
#include  "CLCD_interface.h"
#include  "CLCD_pravite.h"

void CLCD_voidSendCommand(u8 copy_u8command)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	e9 97       	sbiw	r28, 0x39	; 57
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 af       	std	Y+57, r24	; 0x39
	/*set rs low for command*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	/* set rw PIN to write*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
#elif mode==1

	/*set data value*/
	/*GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));*/
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8command,4));
     cc8:	89 ad       	ldd	r24, Y+57	; 0x39
     cca:	82 95       	swap	r24
     ccc:	8f 70       	andi	r24, 0x0F	; 15
     cce:	98 2f       	mov	r25, r24
     cd0:	91 70       	andi	r25, 0x01	; 1
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	64 e0       	ldi	r22, 0x04	; 4
     cd6:	49 2f       	mov	r20, r25
     cd8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8command,5));
     cdc:	89 ad       	ldd	r24, Y+57	; 0x39
     cde:	82 95       	swap	r24
     ce0:	86 95       	lsr	r24
     ce2:	87 70       	andi	r24, 0x07	; 7
     ce4:	98 2f       	mov	r25, r24
     ce6:	91 70       	andi	r25, 0x01	; 1
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	65 e0       	ldi	r22, 0x05	; 5
     cec:	49 2f       	mov	r20, r25
     cee:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8command,6));
     cf2:	89 ad       	ldd	r24, Y+57	; 0x39
     cf4:	82 95       	swap	r24
     cf6:	86 95       	lsr	r24
     cf8:	86 95       	lsr	r24
     cfa:	83 70       	andi	r24, 0x03	; 3
     cfc:	98 2f       	mov	r25, r24
     cfe:	91 70       	andi	r25, 0x01	; 1
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	66 e0       	ldi	r22, 0x06	; 6
     d04:	49 2f       	mov	r20, r25
     d06:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8command,7));
     d0a:	89 ad       	ldd	r24, Y+57	; 0x39
     d0c:	98 2f       	mov	r25, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	67 e0       	ldi	r22, 0x07	; 7
     d18:	49 2f       	mov	r20, r25
     d1a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>


	/*setportvalue(CLCD_DATA_PORT, copy_u8command& 0xf0);*/
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	62 e0       	ldi	r22, 0x02	; 2
     d22:	41 e0       	ldi	r20, 0x01	; 1
     d24:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e8       	ldi	r26, 0x80	; 128
     d2e:	bf e3       	ldi	r27, 0x3F	; 63
     d30:	8d ab       	std	Y+53, r24	; 0x35
     d32:	9e ab       	std	Y+54, r25	; 0x36
     d34:	af ab       	std	Y+55, r26	; 0x37
     d36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d38:	6d a9       	ldd	r22, Y+53	; 0x35
     d3a:	7e a9       	ldd	r23, Y+54	; 0x36
     d3c:	8f a9       	ldd	r24, Y+55	; 0x37
     d3e:	98 ad       	ldd	r25, Y+56	; 0x38
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a ef       	ldi	r20, 0xFA	; 250
     d46:	54 e4       	ldi	r21, 0x44	; 68
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	89 ab       	std	Y+49, r24	; 0x31
     d52:	9a ab       	std	Y+50, r25	; 0x32
     d54:	ab ab       	std	Y+51, r26	; 0x33
     d56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d58:	69 a9       	ldd	r22, Y+49	; 0x31
     d5a:	7a a9       	ldd	r23, Y+50	; 0x32
     d5c:	8b a9       	ldd	r24, Y+51	; 0x33
     d5e:	9c a9       	ldd	r25, Y+52	; 0x34
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	2c f4       	brge	.+10     	; 0xd7a <CLCD_voidSendCommand+0xdc>
		__ticks = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	98 ab       	std	Y+48, r25	; 0x30
     d76:	8f a7       	std	Y+47, r24	; 0x2f
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <CLCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
     d7a:	69 a9       	ldd	r22, Y+49	; 0x31
     d7c:	7a a9       	ldd	r23, Y+50	; 0x32
     d7e:	8b a9       	ldd	r24, Y+51	; 0x33
     d80:	9c a9       	ldd	r25, Y+52	; 0x34
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	57 e4       	ldi	r21, 0x47	; 71
     d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	4c f5       	brge	.+82     	; 0xde4 <CLCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d92:	6d a9       	ldd	r22, Y+53	; 0x35
     d94:	7e a9       	ldd	r23, Y+54	; 0x36
     d96:	8f a9       	ldd	r24, Y+55	; 0x37
     d98:	98 ad       	ldd	r25, Y+56	; 0x38
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	98 ab       	std	Y+48, r25	; 0x30
     db8:	8f a7       	std	Y+47, r24	; 0x2f
     dba:	0f c0       	rjmp	.+30     	; 0xdda <CLCD_voidSendCommand+0x13c>
     dbc:	88 ec       	ldi	r24, 0xC8	; 200
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9e a7       	std	Y+46, r25	; 0x2e
     dc2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc4:	8d a5       	ldd	r24, Y+45	; 0x2d
     dc6:	9e a5       	ldd	r25, Y+46	; 0x2e
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <CLCD_voidSendCommand+0x12a>
     dcc:	9e a7       	std	Y+46, r25	; 0x2e
     dce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
     dd2:	98 a9       	ldd	r25, Y+48	; 0x30
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	98 ab       	std	Y+48, r25	; 0x30
     dd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	8f a5       	ldd	r24, Y+47	; 0x2f
     ddc:	98 a9       	ldd	r25, Y+48	; 0x30
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f7       	brne	.-38     	; 0xdbc <CLCD_voidSendCommand+0x11e>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <CLCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	69 a9       	ldd	r22, Y+49	; 0x31
     de6:	7a a9       	ldd	r23, Y+50	; 0x32
     de8:	8b a9       	ldd	r24, Y+51	; 0x33
     dea:	9c a9       	ldd	r25, Y+52	; 0x34
     dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	98 ab       	std	Y+48, r25	; 0x30
     df6:	8f a7       	std	Y+47, r24	; 0x2f
     df8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dfa:	98 a9       	ldd	r25, Y+48	; 0x30
     dfc:	9c a7       	std	Y+44, r25	; 0x2c
     dfe:	8b a7       	std	Y+43, r24	; 0x2b
     e00:	8b a5       	ldd	r24, Y+43	; 0x2b
     e02:	9c a5       	ldd	r25, Y+44	; 0x2c
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <CLCD_voidSendCommand+0x166>
     e08:	9c a7       	std	Y+44, r25	; 0x2c
     e0a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a0 e8       	ldi	r26, 0x80	; 128
     e1c:	bf e3       	ldi	r27, 0x3F	; 63
     e1e:	8f a3       	std	Y+39, r24	; 0x27
     e20:	98 a7       	std	Y+40, r25	; 0x28
     e22:	a9 a7       	std	Y+41, r26	; 0x29
     e24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e26:	6f a1       	ldd	r22, Y+39	; 0x27
     e28:	78 a5       	ldd	r23, Y+40	; 0x28
     e2a:	89 a5       	ldd	r24, Y+41	; 0x29
     e2c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	4a ef       	ldi	r20, 0xFA	; 250
     e34:	54 e4       	ldi	r21, 0x44	; 68
     e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	8b a3       	std	Y+35, r24	; 0x23
     e40:	9c a3       	std	Y+36, r25	; 0x24
     e42:	ad a3       	std	Y+37, r26	; 0x25
     e44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e46:	6b a1       	ldd	r22, Y+35	; 0x23
     e48:	7c a1       	ldd	r23, Y+36	; 0x24
     e4a:	8d a1       	ldd	r24, Y+37	; 0x25
     e4c:	9e a1       	ldd	r25, Y+38	; 0x26
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	5f e3       	ldi	r21, 0x3F	; 63
     e56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e5a:	88 23       	and	r24, r24
     e5c:	2c f4       	brge	.+10     	; 0xe68 <CLCD_voidSendCommand+0x1ca>
		__ticks = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9a a3       	std	Y+34, r25	; 0x22
     e64:	89 a3       	std	Y+33, r24	; 0x21
     e66:	3f c0       	rjmp	.+126    	; 0xee6 <CLCD_voidSendCommand+0x248>
	else if (__tmp > 65535)
     e68:	6b a1       	ldd	r22, Y+35	; 0x23
     e6a:	7c a1       	ldd	r23, Y+36	; 0x24
     e6c:	8d a1       	ldd	r24, Y+37	; 0x25
     e6e:	9e a1       	ldd	r25, Y+38	; 0x26
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	3f ef       	ldi	r19, 0xFF	; 255
     e74:	4f e7       	ldi	r20, 0x7F	; 127
     e76:	57 e4       	ldi	r21, 0x47	; 71
     e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e7c:	18 16       	cp	r1, r24
     e7e:	4c f5       	brge	.+82     	; 0xed2 <CLCD_voidSendCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e80:	6f a1       	ldd	r22, Y+39	; 0x27
     e82:	78 a5       	ldd	r23, Y+40	; 0x28
     e84:	89 a5       	ldd	r24, Y+41	; 0x29
     e86:	9a a5       	ldd	r25, Y+42	; 0x2a
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e2       	ldi	r20, 0x20	; 32
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	9a a3       	std	Y+34, r25	; 0x22
     ea6:	89 a3       	std	Y+33, r24	; 0x21
     ea8:	0f c0       	rjmp	.+30     	; 0xec8 <CLCD_voidSendCommand+0x22a>
     eaa:	88 ec       	ldi	r24, 0xC8	; 200
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	98 a3       	std	Y+32, r25	; 0x20
     eb0:	8f 8f       	std	Y+31, r24	; 0x1f
     eb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eb4:	98 a1       	ldd	r25, Y+32	; 0x20
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <CLCD_voidSendCommand+0x218>
     eba:	98 a3       	std	Y+32, r25	; 0x20
     ebc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ebe:	89 a1       	ldd	r24, Y+33	; 0x21
     ec0:	9a a1       	ldd	r25, Y+34	; 0x22
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	9a a3       	std	Y+34, r25	; 0x22
     ec6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec8:	89 a1       	ldd	r24, Y+33	; 0x21
     eca:	9a a1       	ldd	r25, Y+34	; 0x22
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	69 f7       	brne	.-38     	; 0xeaa <CLCD_voidSendCommand+0x20c>
     ed0:	14 c0       	rjmp	.+40     	; 0xefa <CLCD_voidSendCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed2:	6b a1       	ldd	r22, Y+35	; 0x23
     ed4:	7c a1       	ldd	r23, Y+36	; 0x24
     ed6:	8d a1       	ldd	r24, Y+37	; 0x25
     ed8:	9e a1       	ldd	r25, Y+38	; 0x26
     eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	9a a3       	std	Y+34, r25	; 0x22
     ee4:	89 a3       	std	Y+33, r24	; 0x21
     ee6:	89 a1       	ldd	r24, Y+33	; 0x21
     ee8:	9a a1       	ldd	r25, Y+34	; 0x22
     eea:	9e 8f       	std	Y+30, r25	; 0x1e
     eec:	8d 8f       	std	Y+29, r24	; 0x1d
     eee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ef0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <CLCD_voidSendCommand+0x254>
     ef6:	9e 8f       	std	Y+30, r25	; 0x1e
     ef8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/*set low for bits in data value*/
	/*setportvalue(CLCD_DATA_PORT, (copy_u8command<<4)&0xf0);*/
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8command,0));
     efa:	89 ad       	ldd	r24, Y+57	; 0x39
     efc:	98 2f       	mov	r25, r24
     efe:	91 70       	andi	r25, 0x01	; 1
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	64 e0       	ldi	r22, 0x04	; 4
     f04:	49 2f       	mov	r20, r25
     f06:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8command,1));
     f0a:	89 ad       	ldd	r24, Y+57	; 0x39
     f0c:	86 95       	lsr	r24
     f0e:	98 2f       	mov	r25, r24
     f10:	91 70       	andi	r25, 0x01	; 1
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	65 e0       	ldi	r22, 0x05	; 5
     f16:	49 2f       	mov	r20, r25
     f18:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8command,2));
     f1c:	89 ad       	ldd	r24, Y+57	; 0x39
     f1e:	86 95       	lsr	r24
     f20:	86 95       	lsr	r24
     f22:	98 2f       	mov	r25, r24
     f24:	91 70       	andi	r25, 0x01	; 1
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	66 e0       	ldi	r22, 0x06	; 6
     f2a:	49 2f       	mov	r20, r25
     f2c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8command,3));
     f30:	89 ad       	ldd	r24, Y+57	; 0x39
     f32:	86 95       	lsr	r24
     f34:	86 95       	lsr	r24
     f36:	86 95       	lsr	r24
     f38:	98 2f       	mov	r25, r24
     f3a:	91 70       	andi	r25, 0x01	; 1
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	67 e0       	ldi	r22, 0x07	; 7
     f40:	49 2f       	mov	r20, r25
     f42:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>

	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	62 e0       	ldi	r22, 0x02	; 2
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a0 e8       	ldi	r26, 0x80	; 128
     f56:	bf e3       	ldi	r27, 0x3F	; 63
     f58:	89 8f       	std	Y+25, r24	; 0x19
     f5a:	9a 8f       	std	Y+26, r25	; 0x1a
     f5c:	ab 8f       	std	Y+27, r26	; 0x1b
     f5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f60:	69 8d       	ldd	r22, Y+25	; 0x19
     f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	4a ef       	ldi	r20, 0xFA	; 250
     f6e:	54 e4       	ldi	r21, 0x44	; 68
     f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	8d 8b       	std	Y+21, r24	; 0x15
     f7a:	9e 8b       	std	Y+22, r25	; 0x16
     f7c:	af 8b       	std	Y+23, r26	; 0x17
     f7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f80:	6d 89       	ldd	r22, Y+21	; 0x15
     f82:	7e 89       	ldd	r23, Y+22	; 0x16
     f84:	8f 89       	ldd	r24, Y+23	; 0x17
     f86:	98 8d       	ldd	r25, Y+24	; 0x18
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e8       	ldi	r20, 0x80	; 128
     f8e:	5f e3       	ldi	r21, 0x3F	; 63
     f90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f94:	88 23       	and	r24, r24
     f96:	2c f4       	brge	.+10     	; 0xfa2 <CLCD_voidSendCommand+0x304>
		__ticks = 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	9c 8b       	std	Y+20, r25	; 0x14
     f9e:	8b 8b       	std	Y+19, r24	; 0x13
     fa0:	3f c0       	rjmp	.+126    	; 0x1020 <CLCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
     fa2:	6d 89       	ldd	r22, Y+21	; 0x15
     fa4:	7e 89       	ldd	r23, Y+22	; 0x16
     fa6:	8f 89       	ldd	r24, Y+23	; 0x17
     fa8:	98 8d       	ldd	r25, Y+24	; 0x18
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	3f ef       	ldi	r19, 0xFF	; 255
     fae:	4f e7       	ldi	r20, 0x7F	; 127
     fb0:	57 e4       	ldi	r21, 0x47	; 71
     fb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fb6:	18 16       	cp	r1, r24
     fb8:	4c f5       	brge	.+82     	; 0x100c <CLCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fba:	69 8d       	ldd	r22, Y+25	; 0x19
     fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e2       	ldi	r20, 0x20	; 32
     fc8:	51 e4       	ldi	r21, 0x41	; 65
     fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	9c 8b       	std	Y+20, r25	; 0x14
     fe0:	8b 8b       	std	Y+19, r24	; 0x13
     fe2:	0f c0       	rjmp	.+30     	; 0x1002 <CLCD_voidSendCommand+0x364>
     fe4:	88 ec       	ldi	r24, 0xC8	; 200
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9a 8b       	std	Y+18, r25	; 0x12
     fea:	89 8b       	std	Y+17, r24	; 0x11
     fec:	89 89       	ldd	r24, Y+17	; 0x11
     fee:	9a 89       	ldd	r25, Y+18	; 0x12
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <CLCD_voidSendCommand+0x352>
     ff4:	9a 8b       	std	Y+18, r25	; 0x12
     ff6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff8:	8b 89       	ldd	r24, Y+19	; 0x13
     ffa:	9c 89       	ldd	r25, Y+20	; 0x14
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	9c 8b       	std	Y+20, r25	; 0x14
    1000:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1002:	8b 89       	ldd	r24, Y+19	; 0x13
    1004:	9c 89       	ldd	r25, Y+20	; 0x14
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	69 f7       	brne	.-38     	; 0xfe4 <CLCD_voidSendCommand+0x346>
    100a:	14 c0       	rjmp	.+40     	; 0x1034 <CLCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    100c:	6d 89       	ldd	r22, Y+21	; 0x15
    100e:	7e 89       	ldd	r23, Y+22	; 0x16
    1010:	8f 89       	ldd	r24, Y+23	; 0x17
    1012:	98 8d       	ldd	r25, Y+24	; 0x18
    1014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	9c 8b       	std	Y+20, r25	; 0x14
    101e:	8b 8b       	std	Y+19, r24	; 0x13
    1020:	8b 89       	ldd	r24, Y+19	; 0x13
    1022:	9c 89       	ldd	r25, Y+20	; 0x14
    1024:	98 8b       	std	Y+16, r25	; 0x10
    1026:	8f 87       	std	Y+15, r24	; 0x0f
    1028:	8f 85       	ldd	r24, Y+15	; 0x0f
    102a:	98 89       	ldd	r25, Y+16	; 0x10
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <CLCD_voidSendCommand+0x38e>
    1030:	98 8b       	std	Y+16, r25	; 0x10
    1032:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	62 e0       	ldi	r22, 0x02	; 2
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a0 e8       	ldi	r26, 0x80	; 128
    1044:	bf e3       	ldi	r27, 0x3F	; 63
    1046:	8b 87       	std	Y+11, r24	; 0x0b
    1048:	9c 87       	std	Y+12, r25	; 0x0c
    104a:	ad 87       	std	Y+13, r26	; 0x0d
    104c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1050:	7c 85       	ldd	r23, Y+12	; 0x0c
    1052:	8d 85       	ldd	r24, Y+13	; 0x0d
    1054:	9e 85       	ldd	r25, Y+14	; 0x0e
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	4a ef       	ldi	r20, 0xFA	; 250
    105c:	54 e4       	ldi	r21, 0x44	; 68
    105e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	8f 83       	std	Y+7, r24	; 0x07
    1068:	98 87       	std	Y+8, r25	; 0x08
    106a:	a9 87       	std	Y+9, r26	; 0x09
    106c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1082:	88 23       	and	r24, r24
    1084:	2c f4       	brge	.+10     	; 0x1090 <CLCD_voidSendCommand+0x3f2>
		__ticks = 1;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	3f c0       	rjmp	.+126    	; 0x110e <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1090:	6f 81       	ldd	r22, Y+7	; 0x07
    1092:	78 85       	ldd	r23, Y+8	; 0x08
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	9a 85       	ldd	r25, Y+10	; 0x0a
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	3f ef       	ldi	r19, 0xFF	; 255
    109c:	4f e7       	ldi	r20, 0x7F	; 127
    109e:	57 e4       	ldi	r21, 0x47	; 71
    10a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10a4:	18 16       	cp	r1, r24
    10a6:	4c f5       	brge	.+82     	; 0x10fa <CLCD_voidSendCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e2       	ldi	r20, 0x20	; 32
    10b6:	51 e4       	ldi	r21, 0x41	; 65
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9e 83       	std	Y+6, r25	; 0x06
    10ce:	8d 83       	std	Y+5, r24	; 0x05
    10d0:	0f c0       	rjmp	.+30     	; 0x10f0 <CLCD_voidSendCommand+0x452>
    10d2:	88 ec       	ldi	r24, 0xC8	; 200
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <CLCD_voidSendCommand+0x440>
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9e 83       	std	Y+6, r25	; 0x06
    10ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <CLCD_voidSendCommand+0x434>
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
    10fc:	78 85       	ldd	r23, Y+8	; 0x08
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <CLCD_voidSendCommand+0x47c>
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


#endif
}
    1122:	e9 96       	adiw	r28, 0x39	; 57
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <CLCD_voidSendData>:
void CLCD_voidSendData(u8 copy_u8Data)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	c3 54       	subi	r28, 0x43	; 67
    113e:	d0 40       	sbci	r29, 0x00	; 0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	fe 01       	movw	r30, r28
    114c:	ed 5b       	subi	r30, 0xBD	; 189
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	80 83       	st	Z, r24
	/*set rs high for data*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	41 e0       	ldi	r20, 0x01	; 1
    1158:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	/* set rw PIN to write*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
#elif mode==1


	/*set high 4 bits*/
	/*setportvalue(CLCD_DATA_PORT, copy_u8Data & 0xf0);*/
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8Data,4));
    1166:	fe 01       	movw	r30, r28
    1168:	ed 5b       	subi	r30, 0xBD	; 189
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	80 81       	ld	r24, Z
    116e:	82 95       	swap	r24
    1170:	8f 70       	andi	r24, 0x0F	; 15
    1172:	98 2f       	mov	r25, r24
    1174:	91 70       	andi	r25, 0x01	; 1
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	64 e0       	ldi	r22, 0x04	; 4
    117a:	49 2f       	mov	r20, r25
    117c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8Data,5));
    1180:	fe 01       	movw	r30, r28
    1182:	ed 5b       	subi	r30, 0xBD	; 189
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	80 81       	ld	r24, Z
    1188:	82 95       	swap	r24
    118a:	86 95       	lsr	r24
    118c:	87 70       	andi	r24, 0x07	; 7
    118e:	98 2f       	mov	r25, r24
    1190:	91 70       	andi	r25, 0x01	; 1
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	65 e0       	ldi	r22, 0x05	; 5
    1196:	49 2f       	mov	r20, r25
    1198:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8Data,6));
    119c:	fe 01       	movw	r30, r28
    119e:	ed 5b       	subi	r30, 0xBD	; 189
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	82 95       	swap	r24
    11a6:	86 95       	lsr	r24
    11a8:	86 95       	lsr	r24
    11aa:	83 70       	andi	r24, 0x03	; 3
    11ac:	98 2f       	mov	r25, r24
    11ae:	91 70       	andi	r25, 0x01	; 1
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	66 e0       	ldi	r22, 0x06	; 6
    11b4:	49 2f       	mov	r20, r25
    11b6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8Data,7));
    11ba:	fe 01       	movw	r30, r28
    11bc:	ed 5b       	subi	r30, 0xBD	; 189
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	98 2f       	mov	r25, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	99 27       	eor	r25, r25
    11c8:	99 1f       	adc	r25, r25
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	67 e0       	ldi	r22, 0x07	; 7
    11ce:	49 2f       	mov	r20, r25
    11d0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    11da:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
    11de:	fe 01       	movw	r30, r28
    11e0:	ff 96       	adiw	r30, 0x3f	; 63
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a0 e8       	ldi	r26, 0x80	; 128
    11e8:	bf e3       	ldi	r27, 0x3F	; 63
    11ea:	80 83       	st	Z, r24
    11ec:	91 83       	std	Z+1, r25	; 0x01
    11ee:	a2 83       	std	Z+2, r26	; 0x02
    11f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f2:	fe 01       	movw	r30, r28
    11f4:	ff 96       	adiw	r30, 0x3f	; 63
    11f6:	60 81       	ld	r22, Z
    11f8:	71 81       	ldd	r23, Z+1	; 0x01
    11fa:	82 81       	ldd	r24, Z+2	; 0x02
    11fc:	93 81       	ldd	r25, Z+3	; 0x03
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	4a ef       	ldi	r20, 0xFA	; 250
    1204:	54 e4       	ldi	r21, 0x44	; 68
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	8b af       	std	Y+59, r24	; 0x3b
    1210:	9c af       	std	Y+60, r25	; 0x3c
    1212:	ad af       	std	Y+61, r26	; 0x3d
    1214:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1216:	6b ad       	ldd	r22, Y+59	; 0x3b
    1218:	7c ad       	ldd	r23, Y+60	; 0x3c
    121a:	8d ad       	ldd	r24, Y+61	; 0x3d
    121c:	9e ad       	ldd	r25, Y+62	; 0x3e
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e8       	ldi	r20, 0x80	; 128
    1224:	5f e3       	ldi	r21, 0x3F	; 63
    1226:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    122a:	88 23       	and	r24, r24
    122c:	2c f4       	brge	.+10     	; 0x1238 <CLCD_voidSendData+0x104>
		__ticks = 1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9a af       	std	Y+58, r25	; 0x3a
    1234:	89 af       	std	Y+57, r24	; 0x39
    1236:	41 c0       	rjmp	.+130    	; 0x12ba <CLCD_voidSendData+0x186>
	else if (__tmp > 65535)
    1238:	6b ad       	ldd	r22, Y+59	; 0x3b
    123a:	7c ad       	ldd	r23, Y+60	; 0x3c
    123c:	8d ad       	ldd	r24, Y+61	; 0x3d
    123e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	3f ef       	ldi	r19, 0xFF	; 255
    1244:	4f e7       	ldi	r20, 0x7F	; 127
    1246:	57 e4       	ldi	r21, 0x47	; 71
    1248:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    124c:	18 16       	cp	r1, r24
    124e:	5c f5       	brge	.+86     	; 0x12a6 <CLCD_voidSendData+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1250:	fe 01       	movw	r30, r28
    1252:	ff 96       	adiw	r30, 0x3f	; 63
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	93 81       	ldd	r25, Z+3	; 0x03
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e2       	ldi	r20, 0x20	; 32
    1262:	51 e4       	ldi	r21, 0x41	; 65
    1264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	9a af       	std	Y+58, r25	; 0x3a
    127a:	89 af       	std	Y+57, r24	; 0x39
    127c:	0f c0       	rjmp	.+30     	; 0x129c <CLCD_voidSendData+0x168>
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	98 af       	std	Y+56, r25	; 0x38
    1284:	8f ab       	std	Y+55, r24	; 0x37
    1286:	8f a9       	ldd	r24, Y+55	; 0x37
    1288:	98 ad       	ldd	r25, Y+56	; 0x38
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <CLCD_voidSendData+0x156>
    128e:	98 af       	std	Y+56, r25	; 0x38
    1290:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1292:	89 ad       	ldd	r24, Y+57	; 0x39
    1294:	9a ad       	ldd	r25, Y+58	; 0x3a
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9a af       	std	Y+58, r25	; 0x3a
    129a:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129c:	89 ad       	ldd	r24, Y+57	; 0x39
    129e:	9a ad       	ldd	r25, Y+58	; 0x3a
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	69 f7       	brne	.-38     	; 0x127e <CLCD_voidSendData+0x14a>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <CLCD_voidSendData+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a6:	6b ad       	ldd	r22, Y+59	; 0x3b
    12a8:	7c ad       	ldd	r23, Y+60	; 0x3c
    12aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    12ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9a af       	std	Y+58, r25	; 0x3a
    12b8:	89 af       	std	Y+57, r24	; 0x39
    12ba:	89 ad       	ldd	r24, Y+57	; 0x39
    12bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    12be:	9e ab       	std	Y+54, r25	; 0x36
    12c0:	8d ab       	std	Y+53, r24	; 0x35
    12c2:	8d a9       	ldd	r24, Y+53	; 0x35
    12c4:	9e a9       	ldd	r25, Y+54	; 0x36
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <CLCD_voidSendData+0x192>
    12ca:	9e ab       	std	Y+54, r25	; 0x36
    12cc:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(1);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	62 e0       	ldi	r22, 0x02	; 2
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a8 ec       	ldi	r26, 0xC8	; 200
    12de:	b2 e4       	ldi	r27, 0x42	; 66
    12e0:	89 ab       	std	Y+49, r24	; 0x31
    12e2:	9a ab       	std	Y+50, r25	; 0x32
    12e4:	ab ab       	std	Y+51, r26	; 0x33
    12e6:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12e8:	69 a9       	ldd	r22, Y+49	; 0x31
    12ea:	7a a9       	ldd	r23, Y+50	; 0x32
    12ec:	8b a9       	ldd	r24, Y+51	; 0x33
    12ee:	9c a9       	ldd	r25, Y+52	; 0x34
    12f0:	2b ea       	ldi	r18, 0xAB	; 171
    12f2:	3a ea       	ldi	r19, 0xAA	; 170
    12f4:	4a e2       	ldi	r20, 0x2A	; 42
    12f6:	50 e4       	ldi	r21, 0x40	; 64
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8d a7       	std	Y+45, r24	; 0x2d
    1302:	9e a7       	std	Y+46, r25	; 0x2e
    1304:	af a7       	std	Y+47, r26	; 0x2f
    1306:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1308:	6d a5       	ldd	r22, Y+45	; 0x2d
    130a:	7e a5       	ldd	r23, Y+46	; 0x2e
    130c:	8f a5       	ldd	r24, Y+47	; 0x2f
    130e:	98 a9       	ldd	r25, Y+48	; 0x30
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    131c:	88 23       	and	r24, r24
    131e:	1c f4       	brge	.+6      	; 0x1326 <CLCD_voidSendData+0x1f2>
		__ticks = 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	8c a7       	std	Y+44, r24	; 0x2c
    1324:	91 c0       	rjmp	.+290    	; 0x1448 <CLCD_voidSendData+0x314>
	else if (__tmp > 255)
    1326:	6d a5       	ldd	r22, Y+45	; 0x2d
    1328:	7e a5       	ldd	r23, Y+46	; 0x2e
    132a:	8f a5       	ldd	r24, Y+47	; 0x2f
    132c:	98 a9       	ldd	r25, Y+48	; 0x30
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	53 e4       	ldi	r21, 0x43	; 67
    1336:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	0c f0       	brlt	.+2      	; 0x1340 <CLCD_voidSendData+0x20c>
    133e:	7b c0       	rjmp	.+246    	; 0x1436 <CLCD_voidSendData+0x302>
	{
		_delay_ms(__us / 1000.0);
    1340:	69 a9       	ldd	r22, Y+49	; 0x31
    1342:	7a a9       	ldd	r23, Y+50	; 0x32
    1344:	8b a9       	ldd	r24, Y+51	; 0x33
    1346:	9c a9       	ldd	r25, Y+52	; 0x34
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4a e7       	ldi	r20, 0x7A	; 122
    134e:	54 e4       	ldi	r21, 0x44	; 68
    1350:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	88 a7       	std	Y+40, r24	; 0x28
    135a:	99 a7       	std	Y+41, r25	; 0x29
    135c:	aa a7       	std	Y+42, r26	; 0x2a
    135e:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1360:	68 a5       	ldd	r22, Y+40	; 0x28
    1362:	79 a5       	ldd	r23, Y+41	; 0x29
    1364:	8a a5       	ldd	r24, Y+42	; 0x2a
    1366:	9b a5       	ldd	r25, Y+43	; 0x2b
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	4a ef       	ldi	r20, 0xFA	; 250
    136e:	54 e4       	ldi	r21, 0x44	; 68
    1370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	8c a3       	std	Y+36, r24	; 0x24
    137a:	9d a3       	std	Y+37, r25	; 0x25
    137c:	ae a3       	std	Y+38, r26	; 0x26
    137e:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1380:	6c a1       	ldd	r22, Y+36	; 0x24
    1382:	7d a1       	ldd	r23, Y+37	; 0x25
    1384:	8e a1       	ldd	r24, Y+38	; 0x26
    1386:	9f a1       	ldd	r25, Y+39	; 0x27
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e8       	ldi	r20, 0x80	; 128
    138e:	5f e3       	ldi	r21, 0x3F	; 63
    1390:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1394:	88 23       	and	r24, r24
    1396:	2c f4       	brge	.+10     	; 0x13a2 <CLCD_voidSendData+0x26e>
		__ticks = 1;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	9b a3       	std	Y+35, r25	; 0x23
    139e:	8a a3       	std	Y+34, r24	; 0x22
    13a0:	3f c0       	rjmp	.+126    	; 0x1420 <CLCD_voidSendData+0x2ec>
	else if (__tmp > 65535)
    13a2:	6c a1       	ldd	r22, Y+36	; 0x24
    13a4:	7d a1       	ldd	r23, Y+37	; 0x25
    13a6:	8e a1       	ldd	r24, Y+38	; 0x26
    13a8:	9f a1       	ldd	r25, Y+39	; 0x27
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	3f ef       	ldi	r19, 0xFF	; 255
    13ae:	4f e7       	ldi	r20, 0x7F	; 127
    13b0:	57 e4       	ldi	r21, 0x47	; 71
    13b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13b6:	18 16       	cp	r1, r24
    13b8:	4c f5       	brge	.+82     	; 0x140c <CLCD_voidSendData+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ba:	68 a5       	ldd	r22, Y+40	; 0x28
    13bc:	79 a5       	ldd	r23, Y+41	; 0x29
    13be:	8a a5       	ldd	r24, Y+42	; 0x2a
    13c0:	9b a5       	ldd	r25, Y+43	; 0x2b
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e2       	ldi	r20, 0x20	; 32
    13c8:	51 e4       	ldi	r21, 0x41	; 65
    13ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	bc 01       	movw	r22, r24
    13d4:	cd 01       	movw	r24, r26
    13d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	9b a3       	std	Y+35, r25	; 0x23
    13e0:	8a a3       	std	Y+34, r24	; 0x22
    13e2:	0f c0       	rjmp	.+30     	; 0x1402 <CLCD_voidSendData+0x2ce>
    13e4:	88 ec       	ldi	r24, 0xC8	; 200
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	99 a3       	std	Y+33, r25	; 0x21
    13ea:	88 a3       	std	Y+32, r24	; 0x20
    13ec:	88 a1       	ldd	r24, Y+32	; 0x20
    13ee:	99 a1       	ldd	r25, Y+33	; 0x21
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <CLCD_voidSendData+0x2bc>
    13f4:	99 a3       	std	Y+33, r25	; 0x21
    13f6:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f8:	8a a1       	ldd	r24, Y+34	; 0x22
    13fa:	9b a1       	ldd	r25, Y+35	; 0x23
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	9b a3       	std	Y+35, r25	; 0x23
    1400:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1402:	8a a1       	ldd	r24, Y+34	; 0x22
    1404:	9b a1       	ldd	r25, Y+35	; 0x23
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	69 f7       	brne	.-38     	; 0x13e4 <CLCD_voidSendData+0x2b0>
    140a:	24 c0       	rjmp	.+72     	; 0x1454 <CLCD_voidSendData+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140c:	6c a1       	ldd	r22, Y+36	; 0x24
    140e:	7d a1       	ldd	r23, Y+37	; 0x25
    1410:	8e a1       	ldd	r24, Y+38	; 0x26
    1412:	9f a1       	ldd	r25, Y+39	; 0x27
    1414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	9b a3       	std	Y+35, r25	; 0x23
    141e:	8a a3       	std	Y+34, r24	; 0x22
    1420:	8a a1       	ldd	r24, Y+34	; 0x22
    1422:	9b a1       	ldd	r25, Y+35	; 0x23
    1424:	9f 8f       	std	Y+31, r25	; 0x1f
    1426:	8e 8f       	std	Y+30, r24	; 0x1e
    1428:	8e 8d       	ldd	r24, Y+30	; 0x1e
    142a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	f1 f7       	brne	.-4      	; 0x142c <CLCD_voidSendData+0x2f8>
    1430:	9f 8f       	std	Y+31, r25	; 0x1f
    1432:	8e 8f       	std	Y+30, r24	; 0x1e
    1434:	0f c0       	rjmp	.+30     	; 0x1454 <CLCD_voidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1436:	6d a5       	ldd	r22, Y+45	; 0x2d
    1438:	7e a5       	ldd	r23, Y+46	; 0x2e
    143a:	8f a5       	ldd	r24, Y+47	; 0x2f
    143c:	98 a9       	ldd	r25, Y+48	; 0x30
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	8c a7       	std	Y+44, r24	; 0x2c
    1448:	8c a5       	ldd	r24, Y+44	; 0x2c
    144a:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    144c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    144e:	8a 95       	dec	r24
    1450:	f1 f7       	brne	.-4      	; 0x144e <CLCD_voidSendData+0x31a>
    1452:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(100);

	/*set low 4 bits*/
	/*setportvalue(CLCD_DATA_PORT, (copy_u8Data<<4)& 0xf0);*/
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8Data,0));
    1454:	fe 01       	movw	r30, r28
    1456:	ed 5b       	subi	r30, 0xBD	; 189
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	80 81       	ld	r24, Z
    145c:	98 2f       	mov	r25, r24
    145e:	91 70       	andi	r25, 0x01	; 1
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	64 e0       	ldi	r22, 0x04	; 4
    1464:	49 2f       	mov	r20, r25
    1466:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8Data,1));
    146a:	fe 01       	movw	r30, r28
    146c:	ed 5b       	subi	r30, 0xBD	; 189
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 81       	ld	r24, Z
    1472:	86 95       	lsr	r24
    1474:	98 2f       	mov	r25, r24
    1476:	91 70       	andi	r25, 0x01	; 1
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	65 e0       	ldi	r22, 0x05	; 5
    147c:	49 2f       	mov	r20, r25
    147e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8Data,2));
    1482:	fe 01       	movw	r30, r28
    1484:	ed 5b       	subi	r30, 0xBD	; 189
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 81       	ld	r24, Z
    148a:	86 95       	lsr	r24
    148c:	86 95       	lsr	r24
    148e:	98 2f       	mov	r25, r24
    1490:	91 70       	andi	r25, 0x01	; 1
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	66 e0       	ldi	r22, 0x06	; 6
    1496:	49 2f       	mov	r20, r25
    1498:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8Data,3));
    149c:	fe 01       	movw	r30, r28
    149e:	ed 5b       	subi	r30, 0xBD	; 189
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	80 81       	ld	r24, Z
    14a4:	86 95       	lsr	r24
    14a6:	86 95       	lsr	r24
    14a8:	86 95       	lsr	r24
    14aa:	98 2f       	mov	r25, r24
    14ac:	91 70       	andi	r25, 0x01	; 1
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	67 e0       	ldi	r22, 0x07	; 7
    14b2:	49 2f       	mov	r20, r25
    14b4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e8       	ldi	r26, 0x80	; 128
    14c8:	bf e3       	ldi	r27, 0x3F	; 63
    14ca:	89 8f       	std	Y+25, r24	; 0x19
    14cc:	9a 8f       	std	Y+26, r25	; 0x1a
    14ce:	ab 8f       	std	Y+27, r26	; 0x1b
    14d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d2:	69 8d       	ldd	r22, Y+25	; 0x19
    14d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4a ef       	ldi	r20, 0xFA	; 250
    14e0:	54 e4       	ldi	r21, 0x44	; 68
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	8d 8b       	std	Y+21, r24	; 0x15
    14ec:	9e 8b       	std	Y+22, r25	; 0x16
    14ee:	af 8b       	std	Y+23, r26	; 0x17
    14f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14f2:	6d 89       	ldd	r22, Y+21	; 0x15
    14f4:	7e 89       	ldd	r23, Y+22	; 0x16
    14f6:	8f 89       	ldd	r24, Y+23	; 0x17
    14f8:	98 8d       	ldd	r25, Y+24	; 0x18
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e8       	ldi	r20, 0x80	; 128
    1500:	5f e3       	ldi	r21, 0x3F	; 63
    1502:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1506:	88 23       	and	r24, r24
    1508:	2c f4       	brge	.+10     	; 0x1514 <CLCD_voidSendData+0x3e0>
		__ticks = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9c 8b       	std	Y+20, r25	; 0x14
    1510:	8b 8b       	std	Y+19, r24	; 0x13
    1512:	3f c0       	rjmp	.+126    	; 0x1592 <CLCD_voidSendData+0x45e>
	else if (__tmp > 65535)
    1514:	6d 89       	ldd	r22, Y+21	; 0x15
    1516:	7e 89       	ldd	r23, Y+22	; 0x16
    1518:	8f 89       	ldd	r24, Y+23	; 0x17
    151a:	98 8d       	ldd	r25, Y+24	; 0x18
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	4f e7       	ldi	r20, 0x7F	; 127
    1522:	57 e4       	ldi	r21, 0x47	; 71
    1524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1528:	18 16       	cp	r1, r24
    152a:	4c f5       	brge	.+82     	; 0x157e <CLCD_voidSendData+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152c:	69 8d       	ldd	r22, Y+25	; 0x19
    152e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e2       	ldi	r20, 0x20	; 32
    153a:	51 e4       	ldi	r21, 0x41	; 65
    153c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	9c 8b       	std	Y+20, r25	; 0x14
    1552:	8b 8b       	std	Y+19, r24	; 0x13
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <CLCD_voidSendData+0x440>
    1556:	88 ec       	ldi	r24, 0xC8	; 200
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9a 8b       	std	Y+18, r25	; 0x12
    155c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    155e:	89 89       	ldd	r24, Y+17	; 0x11
    1560:	9a 89       	ldd	r25, Y+18	; 0x12
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <CLCD_voidSendData+0x42e>
    1566:	9a 8b       	std	Y+18, r25	; 0x12
    1568:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	8b 89       	ldd	r24, Y+19	; 0x13
    156c:	9c 89       	ldd	r25, Y+20	; 0x14
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	9c 8b       	std	Y+20, r25	; 0x14
    1572:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1574:	8b 89       	ldd	r24, Y+19	; 0x13
    1576:	9c 89       	ldd	r25, Y+20	; 0x14
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	69 f7       	brne	.-38     	; 0x1556 <CLCD_voidSendData+0x422>
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <CLCD_voidSendData+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157e:	6d 89       	ldd	r22, Y+21	; 0x15
    1580:	7e 89       	ldd	r23, Y+22	; 0x16
    1582:	8f 89       	ldd	r24, Y+23	; 0x17
    1584:	98 8d       	ldd	r25, Y+24	; 0x18
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	9c 8b       	std	Y+20, r25	; 0x14
    1590:	8b 8b       	std	Y+19, r24	; 0x13
    1592:	8b 89       	ldd	r24, Y+19	; 0x13
    1594:	9c 89       	ldd	r25, Y+20	; 0x14
    1596:	98 8b       	std	Y+16, r25	; 0x10
    1598:	8f 87       	std	Y+15, r24	; 0x0f
    159a:	8f 85       	ldd	r24, Y+15	; 0x0f
    159c:	98 89       	ldd	r25, Y+16	; 0x10
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <CLCD_voidSendData+0x46a>
    15a2:	98 8b       	std	Y+16, r25	; 0x10
    15a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	62 e0       	ldi	r22, 0x02	; 2
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e8       	ldi	r26, 0x80	; 128
    15b6:	bf e3       	ldi	r27, 0x3F	; 63
    15b8:	8b 87       	std	Y+11, r24	; 0x0b
    15ba:	9c 87       	std	Y+12, r25	; 0x0c
    15bc:	ad 87       	std	Y+13, r26	; 0x0d
    15be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	4a ef       	ldi	r20, 0xFA	; 250
    15ce:	54 e4       	ldi	r21, 0x44	; 68
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	8f 83       	std	Y+7, r24	; 0x07
    15da:	98 87       	std	Y+8, r25	; 0x08
    15dc:	a9 87       	std	Y+9, r26	; 0x09
    15de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e0:	6f 81       	ldd	r22, Y+7	; 0x07
    15e2:	78 85       	ldd	r23, Y+8	; 0x08
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e8       	ldi	r20, 0x80	; 128
    15ee:	5f e3       	ldi	r21, 0x3F	; 63
    15f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f4:	88 23       	and	r24, r24
    15f6:	2c f4       	brge	.+10     	; 0x1602 <CLCD_voidSendData+0x4ce>
		__ticks = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	8d 83       	std	Y+5, r24	; 0x05
    1600:	3f c0       	rjmp	.+126    	; 0x1680 <CLCD_voidSendData+0x54c>
	else if (__tmp > 65535)
    1602:	6f 81       	ldd	r22, Y+7	; 0x07
    1604:	78 85       	ldd	r23, Y+8	; 0x08
    1606:	89 85       	ldd	r24, Y+9	; 0x09
    1608:	9a 85       	ldd	r25, Y+10	; 0x0a
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	3f ef       	ldi	r19, 0xFF	; 255
    160e:	4f e7       	ldi	r20, 0x7F	; 127
    1610:	57 e4       	ldi	r21, 0x47	; 71
    1612:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1616:	18 16       	cp	r1, r24
    1618:	4c f5       	brge	.+82     	; 0x166c <CLCD_voidSendData+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161a:	6b 85       	ldd	r22, Y+11	; 0x0b
    161c:	7c 85       	ldd	r23, Y+12	; 0x0c
    161e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1620:	9e 85       	ldd	r25, Y+14	; 0x0e
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9e 83       	std	Y+6, r25	; 0x06
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	0f c0       	rjmp	.+30     	; 0x1662 <CLCD_voidSendData+0x52e>
    1644:	88 ec       	ldi	r24, 0xC8	; 200
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9c 83       	std	Y+4, r25	; 0x04
    164a:	8b 83       	std	Y+3, r24	; 0x03
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <CLCD_voidSendData+0x51c>
    1654:	9c 83       	std	Y+4, r25	; 0x04
    1656:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	69 f7       	brne	.-38     	; 0x1644 <CLCD_voidSendData+0x510>
    166a:	14 c0       	rjmp	.+40     	; 0x1694 <CLCD_voidSendData+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166c:	6f 81       	ldd	r22, Y+7	; 0x07
    166e:	78 85       	ldd	r23, Y+8	; 0x08
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	9a 85       	ldd	r25, Y+10	; 0x0a
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <CLCD_voidSendData+0x558>
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    1694:	cd 5b       	subi	r28, 0xBD	; 189
    1696:	df 4f       	sbci	r29, 0xFF	; 255
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <CLCD_voidInit>:
void CLCD_voidInit(void)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	2e 97       	sbiw	r28, 0x0e	; 14
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a4 e2       	ldi	r26, 0x24	; 36
    16c2:	b2 e4       	ldi	r27, 0x42	; 66
    16c4:	8b 87       	std	Y+11, r24	; 0x0b
    16c6:	9c 87       	std	Y+12, r25	; 0x0c
    16c8:	ad 87       	std	Y+13, r26	; 0x0d
    16ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a ef       	ldi	r20, 0xFA	; 250
    16da:	54 e4       	ldi	r21, 0x44	; 68
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8f 83       	std	Y+7, r24	; 0x07
    16e6:	98 87       	std	Y+8, r25	; 0x08
    16e8:	a9 87       	std	Y+9, r26	; 0x09
    16ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1700:	88 23       	and	r24, r24
    1702:	2c f4       	brge	.+10     	; 0x170e <CLCD_voidInit+0x66>
		__ticks = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	3f c0       	rjmp	.+126    	; 0x178c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    170e:	6f 81       	ldd	r22, Y+7	; 0x07
    1710:	78 85       	ldd	r23, Y+8	; 0x08
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	57 e4       	ldi	r21, 0x47	; 71
    171e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	4c f5       	brge	.+82     	; 0x1778 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e2       	ldi	r20, 0x20	; 32
    1734:	51 e4       	ldi	r21, 0x41	; 65
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	0f c0       	rjmp	.+30     	; 0x176e <CLCD_voidInit+0xc6>
    1750:	88 ec       	ldi	r24, 0xC8	; 200
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <CLCD_voidInit+0xb4>
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	69 f7       	brne	.-38     	; 0x1750 <CLCD_voidInit+0xa8>
    1776:	14 c0       	rjmp	.+40     	; 0x17a0 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <CLCD_voidInit+0xf0>
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
#elif mode ==1
	{
		/*wait for more than 40 ms*/
		_delay_ms(41);

		CLCD_voidSendCommand(0x33);
    17a0:	83 e3       	ldi	r24, 0x33	; 51
    17a2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
		CLCD_voidSendCommand(0x32);
    17a6:	82 e3       	ldi	r24, 0x32	; 50
    17a8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>


		/*function set command : 2line ,5*8 front size*/
		CLCD_voidSendCommand(0x28);
    17ac:	88 e2       	ldi	r24, 0x28	; 40
    17ae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

		/*diplaly on off control,display enable,cursor enable,blink enable*/
		CLCD_voidSendCommand(0b00001100);
    17b2:	8c e0       	ldi	r24, 0x0C	; 12
    17b4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

		/*clear display*/
		CLCD_voidSendCommand(1);
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	}
#endif

}
    17be:	2e 96       	adiw	r28, 0x0e	; 14
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* copy_string)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <CLCD_voidSendString+0x6>
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	0a c0       	rjmp	.+20     	; 0x17f4 <CLCD_voidSendString+0x24>
	while(*copy_string !='\0')
	{
		CLCD_voidSendData(*copy_string);
    17e0:	e9 81       	ldd	r30, Y+1	; 0x01
    17e2:	fa 81       	ldd	r31, Y+2	; 0x02
    17e4:	80 81       	ld	r24, Z
    17e6:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_voidSendData>
		copy_string++;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
#endif

}
void CLCD_voidSendString(const char* copy_string)
{
	while(*copy_string !='\0')
    17f4:	e9 81       	ldd	r30, Y+1	; 0x01
    17f6:	fa 81       	ldd	r31, Y+2	; 0x02
    17f8:	80 81       	ld	r24, Z
    17fa:	88 23       	and	r24, r24
    17fc:	89 f7       	brne	.-30     	; 0x17e0 <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*copy_string);
		copy_string++;

	}

}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <CLCD_voidGOTOXY>:
void CLCD_voidGOTOXY(u8 copy_u8xpostion,u8 copy_u8ypostion)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <CLCD_voidGOTOXY+0x6>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	8a 83       	std	Y+2, r24	; 0x02
    1816:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8xpostion==0)
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 23       	and	r24, r24
    181c:	19 f4       	brne	.+6      	; 0x1824 <CLCD_voidGOTOXY+0x1c>
	{
		/*the location at the frist line */
		Local_u8Address=copy_u8ypostion;
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	06 c0       	rjmp	.+12     	; 0x1830 <CLCD_voidGOTOXY+0x28>
	}
	else if(copy_u8xpostion==1)
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	19 f4       	brne	.+6      	; 0x1830 <CLCD_voidGOTOXY+0x28>
	{
		/*the location at the second line*/
		Local_u8Address=0x40+copy_u8ypostion;
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	80 5c       	subi	r24, 0xC0	; 192
    182e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit 7 in DDRAM address and send command*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	80 58       	subi	r24, 0x80	; 128
    1834:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <CLCD_voidWrite_SpacialC>:

void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	27 97       	sbiw	r28, 0x07	; 7
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
    185c:	6d 83       	std	Y+5, r22	; 0x05
    185e:	4e 83       	std	Y+6, r20	; 0x06
    1860:	2f 83       	std	Y+7, r18	; 0x07
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(address+64);
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 5c       	subi	r24, 0xC0	; 192
    187a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	for(u8 i=0;i<8;i++)
    187e:	19 82       	std	Y+1, r1	; 0x01
    1880:	0e c0       	rjmp	.+28     	; 0x189e <CLCD_voidWrite_SpacialC+0x5a>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	fc 01       	movw	r30, r24
    188e:	e2 0f       	add	r30, r18
    1890:	f3 1f       	adc	r31, r19
    1892:	80 81       	ld	r24, Z
    1894:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_voidSendData>
void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
	CLCD_voidSendCommand(address+64);
	for(u8 i=0;i<8;i++)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	88 30       	cpi	r24, 0x08	; 8
    18a2:	78 f3       	brcs	.-34     	; 0x1882 <CLCD_voidWrite_SpacialC+0x3e>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
	}
	/*return to dd ram*/
	CLCD_voidGOTOXY(copy_u8xpos	, copy_u8ypos);
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	6f 81       	ldd	r22, Y+7	; 0x07
    18a8:	0e 94 04 0c 	call	0x1808	; 0x1808 <CLCD_voidGOTOXY>

	CLCD_voidSendData(copy_u8Blocknum);
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_voidSendData>

}
    18b2:	27 96       	adiw	r28, 0x07	; 7
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <CLCD_voidNumber>:
void CLCD_voidNumber(u32 copy_u32Number)
{
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	61 97       	sbiw	r28, 0x11	; 17
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	6e 87       	std	Y+14, r22	; 0x0e
    18de:	7f 87       	std	Y+15, r23	; 0x0f
    18e0:	88 8b       	std	Y+16, r24	; 0x10
    18e2:	99 8b       	std	Y+17, r25	; 0x11

	/*create arr of char from 11 element*/
	char buf[12];  // max 10 digits + null terminator
	uint8_t i = 10;
    18e4:	8a e0       	ldi	r24, 0x0A	; 10
    18e6:	89 83       	std	Y+1, r24	; 0x01
	buf[i--] = '\0';
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	ce 01       	movw	r24, r28
    18f0:	02 96       	adiw	r24, 0x02	; 2
    18f2:	fc 01       	movw	r30, r24
    18f4:	e2 0f       	add	r30, r18
    18f6:	f3 1f       	adc	r31, r19
    18f8:	10 82       	st	Z, r1
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	81 50       	subi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
	do {
		buf[i--] = copy_u32Number % 10 + '0';
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	08 2f       	mov	r16, r24
    1904:	10 e0       	ldi	r17, 0x00	; 0
    1906:	8e 85       	ldd	r24, Y+14	; 0x0e
    1908:	9f 85       	ldd	r25, Y+15	; 0x0f
    190a:	a8 89       	ldd	r26, Y+16	; 0x10
    190c:	b9 89       	ldd	r27, Y+17	; 0x11
    190e:	2a e0       	ldi	r18, 0x0A	; 10
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__udivmodsi4>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	28 2f       	mov	r18, r24
    1924:	20 5d       	subi	r18, 0xD0	; 208
    1926:	ce 01       	movw	r24, r28
    1928:	02 96       	adiw	r24, 0x02	; 2
    192a:	fc 01       	movw	r30, r24
    192c:	e0 0f       	add	r30, r16
    192e:	f1 1f       	adc	r31, r17
    1930:	20 83       	st	Z, r18
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	81 50       	subi	r24, 0x01	; 1
    1936:	89 83       	std	Y+1, r24	; 0x01
		copy_u32Number /= 10;
    1938:	8e 85       	ldd	r24, Y+14	; 0x0e
    193a:	9f 85       	ldd	r25, Y+15	; 0x0f
    193c:	a8 89       	ldd	r26, Y+16	; 0x10
    193e:	b9 89       	ldd	r27, Y+17	; 0x11
    1940:	2a e0       	ldi	r18, 0x0A	; 10
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__udivmodsi4>
    1950:	da 01       	movw	r26, r20
    1952:	c9 01       	movw	r24, r18
    1954:	8e 87       	std	Y+14, r24	; 0x0e
    1956:	9f 87       	std	Y+15, r25	; 0x0f
    1958:	a8 8b       	std	Y+16, r26	; 0x10
    195a:	b9 8b       	std	Y+17, r27	; 0x11
	} while (copy_u32Number > 0 && i > 0);
    195c:	8e 85       	ldd	r24, Y+14	; 0x0e
    195e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1960:	a8 89       	ldd	r26, Y+16	; 0x10
    1962:	b9 89       	ldd	r27, Y+17	; 0x11
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	a1 05       	cpc	r26, r1
    1968:	b1 05       	cpc	r27, r1
    196a:	19 f0       	breq	.+6      	; 0x1972 <CLCD_voidNumber+0xae>
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	88 23       	and	r24, r24
    1970:	39 f6       	brne	.-114    	; 0x1900 <CLCD_voidNumber+0x3c>
	CLCD_voidSendString(&buf[i+1]);
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9c 01       	movw	r18, r24
    197a:	2f 5f       	subi	r18, 0xFF	; 255
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	ce 01       	movw	r24, r28
    1980:	02 96       	adiw	r24, 0x02	; 2
    1982:	82 0f       	add	r24, r18
    1984:	93 1f       	adc	r25, r19
    1986:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
		}
	}



}
    198a:	61 96       	adiw	r28, 0x11	; 17
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	08 95       	ret

000019a0 <CLCD_voidWritename.1461>:
		buf[i--] = copy_u32Number % 10 + '0';
		copy_u32Number /= 10;
	} while (copy_u32Number > 0 && i > 0);
	CLCD_voidSendString(&buf[i+1]);
	void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
	{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <CLCD_voidWritename.1461+0x6>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <CLCD_voidWritename.1461+0x8>
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	9b 83       	std	Y+3, r25	; 0x03
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	6c 83       	std	Y+4, r22	; 0x04

		for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    19b2:	19 82       	std	Y+1, r1	; 0x01
    19b4:	13 c0       	rjmp	.+38     	; 0x19dc <CLCD_voidWritename.1461+0x3c>
		{
			CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	9b 81       	ldd	r25, Y+3	; 0x03
    19c0:	fc 01       	movw	r30, r24
    19c2:	e2 0f       	add	r30, r18
    19c4:	f3 1f       	adc	r31, r19
    19c6:	80 81       	ld	r24, Z
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	69 81       	ldd	r22, Y+1	; 0x01
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	29 81       	ldd	r18, Y+1	; 0x01
    19d2:	0e 94 22 0c 	call	0x1844	; 0x1844 <CLCD_voidWrite_SpacialC>
	} while (copy_u32Number > 0 && i > 0);
	CLCD_voidSendString(&buf[i+1]);
	void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
	{

		for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	8f 5f       	subi	r24, 0xFF	; 255
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	99 81       	ldd	r25, Y+1	; 0x01
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	98 17       	cp	r25, r24
    19e2:	48 f3       	brcs	.-46     	; 0x19b6 <CLCD_voidWritename.1461+0x16>
		{
			CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
		}
	}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <CLCD_ClearScreen>:



}
void CLCD_ClearScreen(void)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLEAR_COMMAND);
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <CLCD_voidCursorShift>:


void CLCD_voidCursorShift(u8 dircation)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	0f 92       	push	r0
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	88 23       	and	r24, r24
    1a16:	21 f4       	brne	.+8      	; 0x1a20 <CLCD_voidCursorShift+0x1a>
		CLCD_voidSendCommand(0x14);
    1a18:	84 e1       	ldi	r24, 0x14	; 20
    1a1a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    1a1e:	06 c0       	rjmp	.+12     	; 0x1a2c <CLCD_voidCursorShift+0x26>
	else if(dircation==Left)
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	19 f4       	brne	.+6      	; 0x1a2c <CLCD_voidCursorShift+0x26>
		CLCD_voidSendCommand(0x10);
    1a26:	80 e1       	ldi	r24, 0x10	; 16
    1a28:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <CLCD_voidDataShift>:

void CLCD_voidDataShift(u8 dircation)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	0f 92       	push	r0
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	88 23       	and	r24, r24
    1a44:	21 f4       	brne	.+8      	; 0x1a4e <CLCD_voidDataShift+0x1a>
		CLCD_voidSendCommand(0x1c);
    1a46:	8c e1       	ldi	r24, 0x1C	; 28
    1a48:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    1a4c:	06 c0       	rjmp	.+12     	; 0x1a5a <CLCD_voidDataShift+0x26>
	else if(dircation==Left)
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	19 f4       	brne	.+6      	; 0x1a5a <CLCD_voidDataShift+0x26>
		CLCD_voidSendCommand(0x18);
    1a54:	88 e1       	ldi	r24, 0x18	; 24
    1a56:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

}
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <setbitvalue>:




u8 setbitvalue(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8value)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	28 97       	sbiw	r28, 0x08	; 8
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	8a 83       	std	Y+2, r24	; 0x02
    1a78:	6b 83       	std	Y+3, r22	; 0x03
    1a7a:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
     if(copy_u8pin<=DIO_u8PIN7)
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	88 30       	cpi	r24, 0x08	; 8
    1a82:	08 f0       	brcs	.+2      	; 0x1a86 <setbitvalue+0x24>
    1a84:	f4 c0       	rjmp	.+488    	; 0x1c6e <setbitvalue+0x20c>
    {
        if(copy_u8value==DIO_u8PIN_LOW)
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <setbitvalue+0x2c>
    1a8c:	77 c0       	rjmp	.+238    	; 0x1b7c <setbitvalue+0x11a>
        {
            switch(copy_u8port)
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	38 87       	std	Y+8, r19	; 0x08
    1a96:	2f 83       	std	Y+7, r18	; 0x07
    1a98:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9a:	98 85       	ldd	r25, Y+8	; 0x08
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	59 f1       	breq	.+86     	; 0x1af8 <setbitvalue+0x96>
    1aa2:	2f 81       	ldd	r18, Y+7	; 0x07
    1aa4:	38 85       	ldd	r19, Y+8	; 0x08
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <setbitvalue+0x54>
    1aac:	8f 81       	ldd	r24, Y+7	; 0x07
    1aae:	98 85       	ldd	r25, Y+8	; 0x08
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	69 f0       	breq	.+26     	; 0x1ace <setbitvalue+0x6c>
    1ab4:	60 c0       	rjmp	.+192    	; 0x1b76 <setbitvalue+0x114>
    1ab6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ab8:	38 85       	ldd	r19, Y+8	; 0x08
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	31 05       	cpc	r19, r1
    1abe:	89 f1       	breq	.+98     	; 0x1b22 <setbitvalue+0xc0>
    1ac0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac2:	98 85       	ldd	r25, Y+8	; 0x08
    1ac4:	83 30       	cpi	r24, 0x03	; 3
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <setbitvalue+0x6a>
    1aca:	40 c0       	rjmp	.+128    	; 0x1b4c <setbitvalue+0xea>
    1acc:	54 c0       	rjmp	.+168    	; 0x1b76 <setbitvalue+0x114>
            {
                case DIO_u8PORTA : CLR_BIT(PORTA,copy_u8pin); break;
    1ace:	ab e3       	ldi	r26, 0x3B	; 59
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	eb e3       	ldi	r30, 0x3B	; 59
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	02 2e       	mov	r0, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <setbitvalue+0x8a>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <setbitvalue+0x86>
    1af0:	80 95       	com	r24
    1af2:	84 23       	and	r24, r20
    1af4:	8c 93       	st	X, r24
    1af6:	bd c0       	rjmp	.+378    	; 0x1c72 <setbitvalue+0x210>
                case DIO_u8PORTB : CLR_BIT(PORTB,copy_u8pin); break;
    1af8:	a8 e3       	ldi	r26, 0x38	; 56
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e8 e3       	ldi	r30, 0x38	; 56
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	02 2e       	mov	r0, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <setbitvalue+0xb4>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <setbitvalue+0xb0>
    1b1a:	80 95       	com	r24
    1b1c:	84 23       	and	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	a8 c0       	rjmp	.+336    	; 0x1c72 <setbitvalue+0x210>
                case DIO_u8PORTC : CLR_BIT(PORTC,copy_u8pin); break;
    1b22:	a5 e3       	ldi	r26, 0x35	; 53
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e5 e3       	ldi	r30, 0x35	; 53
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <setbitvalue+0xde>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <setbitvalue+0xda>
    1b44:	80 95       	com	r24
    1b46:	84 23       	and	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	93 c0       	rjmp	.+294    	; 0x1c72 <setbitvalue+0x210>
                case DIO_u8PORTD : CLR_BIT(PORTD,copy_u8pin); break;
    1b4c:	a2 e3       	ldi	r26, 0x32	; 50
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e2 e3       	ldi	r30, 0x32	; 50
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 2e       	mov	r0, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <setbitvalue+0x108>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <setbitvalue+0x104>
    1b6e:	80 95       	com	r24
    1b70:	84 23       	and	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	7e c0       	rjmp	.+252    	; 0x1c72 <setbitvalue+0x210>
                default: Local_u8ErrorState=1; break;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	7b c0       	rjmp	.+246    	; 0x1c72 <setbitvalue+0x210>
            }
        }
        else if(copy_u8value ==DIO_u8PIN_HIGH)
    1b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <setbitvalue+0x122>
    1b82:	72 c0       	rjmp	.+228    	; 0x1c68 <setbitvalue+0x206>
        {
            switch(copy_u8port)
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	3e 83       	std	Y+6, r19	; 0x06
    1b8c:	2d 83       	std	Y+5, r18	; 0x05
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	91 05       	cpc	r25, r1
    1b96:	49 f1       	breq	.+82     	; 0x1bea <setbitvalue+0x188>
    1b98:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b9c:	22 30       	cpi	r18, 0x02	; 2
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <setbitvalue+0x14a>
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	61 f0       	breq	.+24     	; 0x1bc2 <setbitvalue+0x160>
    1baa:	5b c0       	rjmp	.+182    	; 0x1c62 <setbitvalue+0x200>
    1bac:	2d 81       	ldd	r18, Y+5	; 0x05
    1bae:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb0:	22 30       	cpi	r18, 0x02	; 2
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	71 f1       	breq	.+92     	; 0x1c12 <setbitvalue+0x1b0>
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	e9 f1       	breq	.+122    	; 0x1c3a <setbitvalue+0x1d8>
    1bc0:	50 c0       	rjmp	.+160    	; 0x1c62 <setbitvalue+0x200>
            {
                case DIO_u8PORTA : SET_BIT(PORTA,copy_u8pin); break;
    1bc2:	ab e3       	ldi	r26, 0x3B	; 59
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	eb e3       	ldi	r30, 0x3B	; 59
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <setbitvalue+0x17e>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <setbitvalue+0x17a>
    1be4:	84 2b       	or	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	44 c0       	rjmp	.+136    	; 0x1c72 <setbitvalue+0x210>
                case DIO_u8PORTB : SET_BIT(PORTB,copy_u8pin); break;
    1bea:	a8 e3       	ldi	r26, 0x38	; 56
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e8 e3       	ldi	r30, 0x38	; 56
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <setbitvalue+0x1a6>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <setbitvalue+0x1a2>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	30 c0       	rjmp	.+96     	; 0x1c72 <setbitvalue+0x210>
                case DIO_u8PORTC : SET_BIT(PORTC,copy_u8pin); break;
    1c12:	a5 e3       	ldi	r26, 0x35	; 53
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e5 e3       	ldi	r30, 0x35	; 53
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <setbitvalue+0x1ce>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <setbitvalue+0x1ca>
    1c34:	84 2b       	or	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	1c c0       	rjmp	.+56     	; 0x1c72 <setbitvalue+0x210>
                case DIO_u8PORTD : SET_BIT(PORTD,copy_u8pin); break;
    1c3a:	a2 e3       	ldi	r26, 0x32	; 50
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e2 e3       	ldi	r30, 0x32	; 50
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <setbitvalue+0x1f6>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <setbitvalue+0x1f2>
    1c5c:	84 2b       	or	r24, r20
    1c5e:	8c 93       	st	X, r24
    1c60:	08 c0       	rjmp	.+16     	; 0x1c72 <setbitvalue+0x210>
                default: Local_u8ErrorState=1; break;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <setbitvalue+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <setbitvalue+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	89 83       	std	Y+1, r24	; 0x01
    }
        
    return Local_u8ErrorState;
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c74:	28 96       	adiw	r28, 0x08	; 8
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <setportvalue>:
u8 setportvalue (u8 copy_u8port,u8 copy_u8value)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <setportvalue+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <setportvalue+0x8>
    1c8e:	0f 92       	push	r0
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	8a 83       	std	Y+2, r24	; 0x02
    1c96:	6b 83       	std	Y+3, r22	; 0x03
     u8 Local_u8ErrorState=0;
    1c98:	19 82       	std	Y+1, r1	; 0x01
      switch(copy_u8port)
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	3d 83       	std	Y+5, r19	; 0x05
    1ca2:	2c 83       	std	Y+4, r18	; 0x04
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	91 05       	cpc	r25, r1
    1cac:	d1 f0       	breq	.+52     	; 0x1ce2 <setportvalue+0x5c>
    1cae:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <setportvalue+0x3c>
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	61 f0       	breq	.+24     	; 0x1cd8 <setportvalue+0x52>
    1cc0:	1f c0       	rjmp	.+62     	; 0x1d00 <setportvalue+0x7a>
    1cc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	81 f0       	breq	.+32     	; 0x1cec <setportvalue+0x66>
    1ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cce:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd0:	83 30       	cpi	r24, 0x03	; 3
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	81 f0       	breq	.+32     	; 0x1cf6 <setportvalue+0x70>
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <setportvalue+0x7a>
    {
        case DIO_u8PORTA: PORTA=copy_u8value; break; 
    1cd8:	eb e3       	ldi	r30, 0x3B	; 59
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	80 83       	st	Z, r24
    1ce0:	11 c0       	rjmp	.+34     	; 0x1d04 <setportvalue+0x7e>
        case DIO_u8PORTB: PORTB=copy_u8value; break; 
    1ce2:	e8 e3       	ldi	r30, 0x38	; 56
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	80 83       	st	Z, r24
    1cea:	0c c0       	rjmp	.+24     	; 0x1d04 <setportvalue+0x7e>
        case DIO_u8PORTC: PORTC=copy_u8value; break; 
    1cec:	e5 e3       	ldi	r30, 0x35	; 53
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	80 83       	st	Z, r24
    1cf4:	07 c0       	rjmp	.+14     	; 0x1d04 <setportvalue+0x7e>
        case DIO_u8PORTD: PORTD=copy_u8value; break; 
    1cf6:	e2 e3       	ldi	r30, 0x32	; 50
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	80 83       	st	Z, r24
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <setportvalue+0x7e>
        default: Local_u8ErrorState=1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 83       	std	Y+1, r24	; 0x01
          
    }
    
     return Local_u8ErrorState;
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <getbit>:

u8 getbit (u8 copy_port ,u8 copy_pin,u8* copy_value)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	27 97       	sbiw	r28, 0x07	; 7
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
    1d2c:	6b 83       	std	Y+3, r22	; 0x03
    1d2e:	5d 83       	std	Y+5, r21	; 0x05
    1d30:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    1d32:	19 82       	std	Y+1, r1	; 0x01
     if((copy_value!=NULL )  &&(copy_pin<=DIO_u8PIN7))
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	9d 81       	ldd	r25, Y+5	; 0x05
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <getbit+0x28>
    1d3c:	78 c0       	rjmp	.+240    	; 0x1e2e <getbit+0x118>
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	88 30       	cpi	r24, 0x08	; 8
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <getbit+0x30>
    1d44:	74 c0       	rjmp	.+232    	; 0x1e2e <getbit+0x118>
     {
         switch(copy_port)
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	3f 83       	std	Y+7, r19	; 0x07
    1d4e:	2e 83       	std	Y+6, r18	; 0x06
    1d50:	4e 81       	ldd	r20, Y+6	; 0x06
    1d52:	5f 81       	ldd	r21, Y+7	; 0x07
    1d54:	41 30       	cpi	r20, 0x01	; 1
    1d56:	51 05       	cpc	r21, r1
    1d58:	59 f1       	breq	.+86     	; 0x1db0 <getbit+0x9a>
    1d5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	91 05       	cpc	r25, r1
    1d62:	34 f4       	brge	.+12     	; 0x1d70 <getbit+0x5a>
    1d64:	2e 81       	ldd	r18, Y+6	; 0x06
    1d66:	3f 81       	ldd	r19, Y+7	; 0x07
    1d68:	21 15       	cp	r18, r1
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	69 f0       	breq	.+26     	; 0x1d88 <getbit+0x72>
    1d6e:	5c c0       	rjmp	.+184    	; 0x1e28 <getbit+0x112>
    1d70:	4e 81       	ldd	r20, Y+6	; 0x06
    1d72:	5f 81       	ldd	r21, Y+7	; 0x07
    1d74:	42 30       	cpi	r20, 0x02	; 2
    1d76:	51 05       	cpc	r21, r1
    1d78:	79 f1       	breq	.+94     	; 0x1dd8 <getbit+0xc2>
    1d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7e:	83 30       	cpi	r24, 0x03	; 3
    1d80:	91 05       	cpc	r25, r1
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <getbit+0x70>
    1d84:	3d c0       	rjmp	.+122    	; 0x1e00 <getbit+0xea>
    1d86:	50 c0       	rjmp	.+160    	; 0x1e28 <getbit+0x112>
         {
             case DIO_u8PORTA: *copy_value=GET_BIT(PINA,copy_pin);  break;
    1d88:	e9 e3       	ldi	r30, 0x39	; 57
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	88 2f       	mov	r24, r24
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a9 01       	movw	r20, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <getbit+0x8a>
    1d9c:	55 95       	asr	r21
    1d9e:	47 95       	ror	r20
    1da0:	8a 95       	dec	r24
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <getbit+0x86>
    1da4:	ca 01       	movw	r24, r20
    1da6:	81 70       	andi	r24, 0x01	; 1
    1da8:	ec 81       	ldd	r30, Y+4	; 0x04
    1daa:	fd 81       	ldd	r31, Y+5	; 0x05
    1dac:	80 83       	st	Z, r24
    1dae:	41 c0       	rjmp	.+130    	; 0x1e32 <getbit+0x11c>
             case DIO_u8PORTB: *copy_value=GET_BIT(PINB,copy_pin);  break;
    1db0:	e6 e3       	ldi	r30, 0x36	; 54
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	88 2f       	mov	r24, r24
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a9 01       	movw	r20, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <getbit+0xb2>
    1dc4:	55 95       	asr	r21
    1dc6:	47 95       	ror	r20
    1dc8:	8a 95       	dec	r24
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <getbit+0xae>
    1dcc:	ca 01       	movw	r24, r20
    1dce:	81 70       	andi	r24, 0x01	; 1
    1dd0:	ec 81       	ldd	r30, Y+4	; 0x04
    1dd2:	fd 81       	ldd	r31, Y+5	; 0x05
    1dd4:	80 83       	st	Z, r24
    1dd6:	2d c0       	rjmp	.+90     	; 0x1e32 <getbit+0x11c>
             case DIO_u8PORTC: *copy_value=GET_BIT(PINC,copy_pin);  break;
    1dd8:	e3 e3       	ldi	r30, 0x33	; 51
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a9 01       	movw	r20, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <getbit+0xda>
    1dec:	55 95       	asr	r21
    1dee:	47 95       	ror	r20
    1df0:	8a 95       	dec	r24
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <getbit+0xd6>
    1df4:	ca 01       	movw	r24, r20
    1df6:	81 70       	andi	r24, 0x01	; 1
    1df8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dfa:	fd 81       	ldd	r31, Y+5	; 0x05
    1dfc:	80 83       	st	Z, r24
    1dfe:	19 c0       	rjmp	.+50     	; 0x1e32 <getbit+0x11c>
             case DIO_u8PORTD: *copy_value=GET_BIT(PIND,copy_pin);  break;
    1e00:	e0 e3       	ldi	r30, 0x30	; 48
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a9 01       	movw	r20, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <getbit+0x102>
    1e14:	55 95       	asr	r21
    1e16:	47 95       	ror	r20
    1e18:	8a 95       	dec	r24
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <getbit+0xfe>
    1e1c:	ca 01       	movw	r24, r20
    1e1e:	81 70       	andi	r24, 0x01	; 1
    1e20:	ec 81       	ldd	r30, Y+4	; 0x04
    1e22:	fd 81       	ldd	r31, Y+5	; 0x05
    1e24:	80 83       	st	Z, r24
    1e26:	05 c0       	rjmp	.+10     	; 0x1e32 <getbit+0x11c>
             
             default: Local_u8ErrorState=1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <getbit+0x11c>
             
         }
     }
     else
     {
         Local_u8ErrorState=1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	89 83       	std	Y+1, r24	; 0x01
     }
     
    
     return Local_u8ErrorState;
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e34:	27 96       	adiw	r28, 0x07	; 7
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <EEPROM_voidWrite_Byte>:
#include "EEPROM_private.h"

#include "TWI_interface.h"

TWI_error EEPROM_voidWrite_Byte(u8 copy_u8DATA,u16 copy_u16Address)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <EEPROM_voidWrite_Byte+0x6>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <EEPROM_voidWrite_Byte+0x8>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	7c 83       	std	Y+4, r23	; 0x04
    1e56:	6b 83       	std	Y+3, r22	; 0x03
	TWI_error local_error=NO_error;
    1e58:	19 82       	std	Y+1, r1	; 0x01
	TWI_SendStartcon();
    1e5a:	0e 94 5f 10 	call	0x20be	; 0x20be <TWI_SendStartcon>
	local_error|=TWI_SendSlaveAddress_Write(0x50 | (((copy_u16Address) & 0x0700) >> 8));
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	80 70       	andi	r24, 0x00	; 0
    1e64:	97 70       	andi	r25, 0x07	; 7
    1e66:	89 2f       	mov	r24, r25
    1e68:	99 27       	eor	r25, r25
    1e6a:	80 65       	ori	r24, 0x50	; 80
    1e6c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <TWI_SendSlaveAddress_Write>
    1e70:	98 2f       	mov	r25, r24
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	89 2b       	or	r24, r25
    1e76:	89 83       	std	Y+1, r24	; 0x01
	TWI_MasterWriteData((u8)copy_u16Address);
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	0e 94 16 11 	call	0x222c	; 0x222c <TWI_MasterWriteData>
	TWI_MasterWriteData(copy_u8DATA);
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	0e 94 16 11 	call	0x222c	; 0x222c <TWI_MasterWriteData>
	TWI_voidSendStopCondition();
    1e84:	0e 94 72 11 	call	0x22e4	; 0x22e4 <TWI_voidSendStopCondition>
	return local_error;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <EEPROM_voidRead_Byte>:
u8 EEPROM_voidRead_Byte(u8 *copy_u8DATA,u16 copy_u16Address)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <EEPROM_voidRead_Byte+0x6>
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <EEPROM_voidRead_Byte+0x8>
    1ea0:	0f 92       	push	r0
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
    1eaa:	7d 83       	std	Y+5, r23	; 0x05
    1eac:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_error=OK;
    1eae:	19 82       	std	Y+1, r1	; 0x01
	local_error=TWI_SendStartcon();
    1eb0:	0e 94 5f 10 	call	0x20be	; 0x20be <TWI_SendStartcon>
    1eb4:	89 83       	std	Y+1, r24	; 0x01
	local_error|=TWI_SendSlaveAddress_Write((0x50)|(copy_u16Address>>8));
    1eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eba:	89 2f       	mov	r24, r25
    1ebc:	99 27       	eor	r25, r25
    1ebe:	80 65       	ori	r24, 0x50	; 80
    1ec0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <TWI_SendSlaveAddress_Write>
    1ec4:	98 2f       	mov	r25, r24
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	89 2b       	or	r24, r25
    1eca:	89 83       	std	Y+1, r24	; 0x01
	local_error|=TWI_MasterWriteData((u8)copy_u16Address);
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	0e 94 16 11 	call	0x222c	; 0x222c <TWI_MasterWriteData>
    1ed2:	98 2f       	mov	r25, r24
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	89 2b       	or	r24, r25
    1ed8:	89 83       	std	Y+1, r24	; 0x01
	local_error|=TWI_SendRestartcon();
    1eda:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_SendRestartcon>
    1ede:	98 2f       	mov	r25, r24
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	89 2b       	or	r24, r25
    1ee4:	89 83       	std	Y+1, r24	; 0x01
	local_error|=TWI_SendSlaveAddress_Read((0x50)|(copy_u16Address>>8));
    1ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eea:	89 2f       	mov	r24, r25
    1eec:	99 27       	eor	r25, r25
    1eee:	80 65       	ori	r24, 0x50	; 80
    1ef0:	0e 94 c1 10 	call	0x2182	; 0x2182 <TWI_SendSlaveAddress_Read>
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	89 2b       	or	r24, r25
    1efa:	89 83       	std	Y+1, r24	; 0x01
	local_error|=TWI_MasterReadData(copy_u8DATA);
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	0e 94 3c 11 	call	0x2278	; 0x2278 <TWI_MasterReadData>
    1f04:	98 2f       	mov	r25, r24
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	89 2b       	or	r24, r25
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	TWI_voidSendStopCondition();
    1f0c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <TWI_voidSendStopCondition>


	return local_error;
    1f10:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <KPD_u8GetPressKey>:
#include "KPD_config.h"
#include  "KPD_interface.h"
#include  "KPD_private.h"

u8 KPD_u8GetPressKey(void)
{
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <KPD_u8GetPressKey+0x6>
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <KPD_u8GetPressKey+0x8>
    1f2a:	0f 92       	push	r0
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
	/* the varible you will use */
	u8 Local_u8PressKey=KPD_NOPRESS_KEY;
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	8b 83       	std	Y+3, r24	; 0x03
	/* arrs you will used */
	static u8 Local_u8KPDarr[Row_num][Column_num]=KPDarr;
	static u8 Local_u8KPDColumnarr[Column_num]={KPD_column0_pin,KPD_column1_pin,KPD_column2_pin,KPD_column3_pin};
	static u8 Local_u8KPDRowarr[Row_num]={KPD_row0_pin,KPD_row1_pin,KPD_row2_pin,KPD_row3_pin};

	for(Local_u8Column=0;Local_u8Column<Column_num;Local_u8Column++)
    1f34:	1a 82       	std	Y+2, r1	; 0x02
    1f36:	5e c0       	rjmp	.+188    	; 0x1ff4 <KPD_u8GetPressKey+0xd2>
	{
		/* active current column */
		setbitvalue(KPD_PORT, Local_u8KPDColumnarr[Local_u8Column]	, DIO_u8PIN_LOW	);
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	88 2f       	mov	r24, r24
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	fc 01       	movw	r30, r24
    1f40:	ee 5f       	subi	r30, 0xFE	; 254
    1f42:	fe 4f       	sbci	r31, 0xFE	; 254
    1f44:	90 81       	ld	r25, Z
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	69 2f       	mov	r22, r25
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>

		for(Local_u8Row=0;Local_u8Row<Row_num;Local_u8Row++)
    1f50:	19 82       	std	Y+1, r1	; 0x01
    1f52:	3d c0       	rjmp	.+122    	; 0x1fce <KPD_u8GetPressKey+0xac>
		{
			/* read the current row*/
			getbit(KPD_PORT, Local_u8KPDRowarr[Local_u8Row], &Local_u8Pin_State);
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	e2 50       	subi	r30, 0x02	; 2
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	90 81       	ld	r25, Z
    1f62:	9e 01       	movw	r18, r28
    1f64:	2c 5f       	subi	r18, 0xFC	; 252
    1f66:	3f 4f       	sbci	r19, 0xFF	; 255
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	69 2f       	mov	r22, r25
    1f6c:	a9 01       	movw	r20, r18
    1f6e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <getbit>

			/*check the swichs pressed */
			if(DIO_u8PIN_LOW==Local_u8Pin_State)
    1f72:	8c 81       	ldd	r24, Y+4	; 0x04
    1f74:	88 23       	and	r24, r24
    1f76:	41 f5       	brne	.+80     	; 0x1fc8 <KPD_u8GetPressKey+0xa6>
			{
				Local_u8PressKey=Local_u8KPDarr[Local_u8Column][Local_u8Row];
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	ca 01       	movw	r24, r20
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	82 0f       	add	r24, r18
    1f90:	93 1f       	adc	r25, r19
    1f92:	fc 01       	movw	r30, r24
    1f94:	ea 5f       	subi	r30, 0xFA	; 250
    1f96:	fe 4f       	sbci	r31, 0xFE	; 254
    1f98:	80 81       	ld	r24, Z
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <KPD_u8GetPressKey+0x9a>
				/* polling (bus waiting) utile the key is relesed */
				while(DIO_u8PIN_LOW==Local_u8Pin_State)
				{
					getbit(KPD_PORT, Local_u8KPDRowarr[Local_u8Row], &Local_u8Pin_State);
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	e2 50       	subi	r30, 0x02	; 2
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	90 81       	ld	r25, Z
    1fac:	9e 01       	movw	r18, r28
    1fae:	2c 5f       	subi	r18, 0xFC	; 252
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb2:	83 e0       	ldi	r24, 0x03	; 3
    1fb4:	69 2f       	mov	r22, r25
    1fb6:	a9 01       	movw	r20, r18
    1fb8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <getbit>
			/*check the swichs pressed */
			if(DIO_u8PIN_LOW==Local_u8Pin_State)
			{
				Local_u8PressKey=Local_u8KPDarr[Local_u8Column][Local_u8Row];
				/* polling (bus waiting) utile the key is relesed */
				while(DIO_u8PIN_LOW==Local_u8Pin_State)
    1fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbe:	88 23       	and	r24, r24
    1fc0:	71 f3       	breq	.-36     	; 0x1f9e <KPD_u8GetPressKey+0x7c>
				{
					getbit(KPD_PORT, Local_u8KPDRowarr[Local_u8Row], &Local_u8Pin_State);

				}
				return Local_u8PressKey;
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	1c c0       	rjmp	.+56     	; 0x2000 <KPD_u8GetPressKey+0xde>
	for(Local_u8Column=0;Local_u8Column<Column_num;Local_u8Column++)
	{
		/* active current column */
		setbitvalue(KPD_PORT, Local_u8KPDColumnarr[Local_u8Column]	, DIO_u8PIN_LOW	);

		for(Local_u8Row=0;Local_u8Row<Row_num;Local_u8Row++)
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	84 30       	cpi	r24, 0x04	; 4
    1fd2:	08 f4       	brcc	.+2      	; 0x1fd6 <KPD_u8GetPressKey+0xb4>
    1fd4:	bf cf       	rjmp	.-130    	; 0x1f54 <KPD_u8GetPressKey+0x32>
				return Local_u8PressKey;
			}

		}
		/* deactive current column */
		setbitvalue(KPD_PORT, Local_u8KPDColumnarr[Local_u8Column]	, DIO_u8PIN_HIGH	);
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	88 2f       	mov	r24, r24
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	fc 01       	movw	r30, r24
    1fde:	ee 5f       	subi	r30, 0xFE	; 254
    1fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe2:	90 81       	ld	r25, Z
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	69 2f       	mov	r22, r25
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <setbitvalue>
	/* arrs you will used */
	static u8 Local_u8KPDarr[Row_num][Column_num]=KPDarr;
	static u8 Local_u8KPDColumnarr[Column_num]={KPD_column0_pin,KPD_column1_pin,KPD_column2_pin,KPD_column3_pin};
	static u8 Local_u8KPDRowarr[Row_num]={KPD_row0_pin,KPD_row1_pin,KPD_row2_pin,KPD_row3_pin};

	for(Local_u8Column=0;Local_u8Column<Column_num;Local_u8Column++)
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	8f 5f       	subi	r24, 0xFF	; 255
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	84 30       	cpi	r24, 0x04	; 4
    1ff8:	08 f4       	brcc	.+2      	; 0x1ffc <KPD_u8GetPressKey+0xda>
    1ffa:	9e cf       	rjmp	.-196    	; 0x1f38 <KPD_u8GetPressKey+0x16>
		setbitvalue(KPD_PORT, Local_u8KPDColumnarr[Local_u8Column]	, DIO_u8PIN_HIGH	);

	}


	return Local_u8PressKey;
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	8d 83       	std	Y+5, r24	; 0x05
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <PORT_voidInti>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidInti(void)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62

	DDRA=PORTA_drive;
    201a:	ea e3       	ldi	r30, 0x3A	; 58
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	8f ef       	ldi	r24, 0xFF	; 255
    2020:	80 83       	st	Z, r24
	DDRB=PORTB_drive;
    2022:	e7 e3       	ldi	r30, 0x37	; 55
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	87 e0       	ldi	r24, 0x07	; 7
    2028:	80 83       	st	Z, r24
	DDRC=PORTC_drive;
    202a:	e4 e3       	ldi	r30, 0x34	; 52
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	80 83       	st	Z, r24
	DDRD=PORTD_drive;
    2032:	e1 e3       	ldi	r30, 0x31	; 49
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	8f e0       	ldi	r24, 0x0F	; 15
    2038:	80 83       	st	Z, r24
	
	PORTA=PORTA_INTI_VALUE;
    203a:	eb e3       	ldi	r30, 0x3B	; 59
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	10 82       	st	Z, r1
	PORTB=PORTB_INTI_VALUE;
    2040:	e8 e3       	ldi	r30, 0x38	; 56
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	10 82       	st	Z, r1
	PORTC=PORTC_INTI_VALUE;
    2046:	e5 e3       	ldi	r30, 0x35	; 53
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	10 82       	st	Z, r1
	PORTD=PORTD_INTI_VALUE;
    204c:	e2 e3       	ldi	r30, 0x32	; 50
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	80 83       	st	Z, r24

}
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <TWI_voidMasterInt>:
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_regisger.h"

void TWI_voidMasterInt(u8 copy_u8SlaveAddress)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	89 83       	std	Y+1, r24	; 0x01
	/* SET CLOCK fre to 400kb/s*/
	TWBR=32;
    2066:	e0 e2       	ldi	r30, 0x20	; 32
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 e2       	ldi	r24, 0x20	; 32
    206c:	80 83       	st	Z, r24
	TWSR=0;
    206e:	e1 e2       	ldi	r30, 0x21	; 33
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	10 82       	st	Z, r1
	//CLR_BIT(TWSR,TWSR_TWPS0);
	//CLR_BIT(TWSR,TWSR_TWPS1);
	/*set address for master if it was recive*/

	TWAR=2;
    2074:	e2 e2       	ldi	r30, 0x22	; 34
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	80 83       	st	Z, r24

	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    207c:	a6 e5       	ldi	r26, 0x56	; 86
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e6 e5       	ldi	r30, 0x56	; 86
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	84 60       	ori	r24, 0x04	; 4
    2088:	8c 93       	st	X, r24


}
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <TWI_voidSlaveInt>:
void TWI_voidSlaveInt(u8 copy_u8SlaveAddress)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	89 83       	std	Y+1, r24	; 0x01
	/*INti address */
	TWAR= (copy_u8SlaveAddress<<1);
    209e:	e2 e2       	ldi	r30, 0x22	; 34
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	88 0f       	add	r24, r24
    20a6:	80 83       	st	Z, r24

	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    20a8:	a6 e5       	ldi	r26, 0x56	; 86
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e6 e5       	ldi	r30, 0x56	; 86
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	84 60       	ori	r24, 0x04	; 4
    20b4:	8c 93       	st	X, r24

}
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <TWI_SendStartcon>:

TWI_error TWI_SendStartcon(void)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
	TWI_error local_error=NO_error;
    20c8:	19 82       	std	Y+1, r1	; 0x01
	/* send start condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTA);
    20ca:	a6 e5       	ldi	r26, 0x56	; 86
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e6 e5       	ldi	r30, 0x56	; 86
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	80 62       	ori	r24, 0x20	; 32
    20d6:	8c 93       	st	X, r24

	/* clear interrupt flag of to start operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    20d8:	a6 e5       	ldi	r26, 0x56	; 86
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e6 e5       	ldi	r30, 0x56	; 86
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	80 68       	ori	r24, 0x80	; 128
    20e4:	8c 93       	st	X, r24
	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    20e6:	a6 e5       	ldi	r26, 0x56	; 86
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e6 e5       	ldi	r30, 0x56	; 86
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	84 60       	ori	r24, 0x04	; 4
    20f2:	8c 93       	st	X, r24
	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    20f4:	e6 e5       	ldi	r30, 0x56	; 86
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	88 23       	and	r24, r24
    20fc:	dc f7       	brge	.-10     	; 0x20f4 <TWI_SendStartcon+0x36>
	if((TWSR&0xf8)!=Start_AC)
    20fe:	e1 e2       	ldi	r30, 0x21	; 33
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	88 7f       	andi	r24, 0xF8	; 248
    210a:	90 70       	andi	r25, 0x00	; 0
    210c:	88 30       	cpi	r24, 0x08	; 8
    210e:	91 05       	cpc	r25, r1
    2110:	11 f0       	breq	.+4      	; 0x2116 <TWI_SendStartcon+0x58>
	{
		local_error=Start_Error;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error;
    2116:	89 81       	ldd	r24, Y+1	; 0x01

}
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <TWI_SendRestartcon>:
TWI_error TWI_SendRestartcon(void)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	TWI_error local_error=NO_error;
    212a:	19 82       	std	Y+1, r1	; 0x01
	/* send start condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTA);
    212c:	a6 e5       	ldi	r26, 0x56	; 86
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e6 e5       	ldi	r30, 0x56	; 86
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	80 62       	ori	r24, 0x20	; 32
    2138:	8c 93       	st	X, r24
	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    213a:	a6 e5       	ldi	r26, 0x56	; 86
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e6 e5       	ldi	r30, 0x56	; 86
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	84 60       	ori	r24, 0x04	; 4
    2146:	8c 93       	st	X, r24
	/* clear interrupt flag of to start operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    2148:	a6 e5       	ldi	r26, 0x56	; 86
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e6 e5       	ldi	r30, 0x56	; 86
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	80 68       	ori	r24, 0x80	; 128
    2154:	8c 93       	st	X, r24
	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    2156:	e6 e5       	ldi	r30, 0x56	; 86
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	88 23       	and	r24, r24
    215e:	dc f7       	brge	.-10     	; 0x2156 <TWI_SendRestartcon+0x36>
	if((TWSR&0xf8)!=RE_Start_AC)
    2160:	e1 e2       	ldi	r30, 0x21	; 33
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	88 7f       	andi	r24, 0xF8	; 248
    216c:	90 70       	andi	r25, 0x00	; 0
    216e:	80 31       	cpi	r24, 0x10	; 16
    2170:	91 05       	cpc	r25, r1
    2172:	11 f0       	breq	.+4      	; 0x2178 <TWI_SendRestartcon+0x58>
	{
		local_error=Re_StartError;
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error;
    2178:	89 81       	ldd	r24, Y+1	; 0x01

}
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <TWI_SendSlaveAddress_Read>:

TWI_error TWI_SendSlaveAddress_Read(u8 copy_u8SlaveAddress)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <TWI_SendSlaveAddress_Read+0x6>
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_error local_error=NO_error;
    218e:	19 82       	std	Y+1, r1	; 0x01
	/*clear Start condition*/
	//CLR_BIT(TWCR,TWCR_TWSTA);

	/*set slave Address on the 7 most bit*/
	TWDR=((copy_u8SlaveAddress<<1)|1);
    2190:	e3 e2       	ldi	r30, 0x23	; 35
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	81 60       	ori	r24, 0x01	; 1
    21a0:	80 83       	st	Z, r24
	/*SET for Read request*/

	/* clear interrupt flag of to start operation*/
	TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWEN);
    21a2:	e6 e5       	ldi	r30, 0x56	; 86
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	84 e8       	ldi	r24, 0x84	; 132
    21a8:	80 83       	st	Z, r24
	/*enable TWI*/

	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    21aa:	e6 e5       	ldi	r30, 0x56	; 86
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	88 23       	and	r24, r24
    21b2:	dc f7       	brge	.-10     	; 0x21aa <TWI_SendSlaveAddress_Read+0x28>
	if((TWSR&0xf8)!=Salve_Add_RD_AC)
    21b4:	e1 e2       	ldi	r30, 0x21	; 33
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	88 7f       	andi	r24, 0xF8	; 248
    21c0:	90 70       	andi	r25, 0x00	; 0
    21c2:	80 34       	cpi	r24, 0x40	; 64
    21c4:	91 05       	cpc	r25, r1
    21c6:	11 f0       	breq	.+4      	; 0x21cc <TWI_SendSlaveAddress_Read+0x4a>
	{
		local_error=Slave_ADD_RD_Err;
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error;
    21cc:	89 81       	ldd	r24, Y+1	; 0x01

}
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <TWI_SendSlaveAddress_Write>:
TWI_error TWI_SendSlaveAddress_Write(u8 copy_u8SlaveAddress )
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	00 d0       	rcall	.+0      	; 0x21de <TWI_SendSlaveAddress_Write+0x6>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_error local_error=NO_error;
    21e4:	19 82       	std	Y+1, r1	; 0x01

	TWDR=((copy_u8SlaveAddress<<1) & 0xFE);
    21e6:	e3 e2       	ldi	r30, 0x23	; 35
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	80 83       	st	Z, r24
	/*enable TWI*/
	TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWEN);
    21f6:	e6 e5       	ldi	r30, 0x56	; 86
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	84 e8       	ldi	r24, 0x84	; 132
    21fc:	80 83       	st	Z, r24


	/* clear interrupt flag of to start operation*/
	//SET_BIT(TWCR,TWCR_TWINT);
	/* wait until the falg is rised*/
	while(!(GET_BIT(TWCR,TWCR_TWINT)));
    21fe:	e6 e5       	ldi	r30, 0x56	; 86
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	88 23       	and	r24, r24
    2206:	dc f7       	brge	.-10     	; 0x21fe <TWI_SendSlaveAddress_Write+0x26>
	if(( TWSR & 0xf8 ) != Salve_Add_WR_AC)
    2208:	e1 e2       	ldi	r30, 0x21	; 33
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	88 7f       	andi	r24, 0xF8	; 248
    2214:	90 70       	andi	r25, 0x00	; 0
    2216:	88 31       	cpi	r24, 0x18	; 24
    2218:	91 05       	cpc	r25, r1
    221a:	11 f0       	breq	.+4      	; 0x2220 <TWI_SendSlaveAddress_Write+0x48>
	{
		local_error=Slave_ADD_WR_Err;
    221c:	84 e0       	ldi	r24, 0x04	; 4
    221e:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error;
    2220:	89 81       	ldd	r24, Y+1	; 0x01

}
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <TWI_MasterWriteData>:

TWI_error TWI_MasterWriteData(u8 copy_u8Data)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <TWI_MasterWriteData+0x6>
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	8a 83       	std	Y+2, r24	; 0x02
	TWI_error local_error=NO_error;
    2238:	19 82       	std	Y+1, r1	; 0x01
	/* write the data in */
	TWDR=copy_u8Data;
    223a:	e3 e2       	ldi	r30, 0x23	; 35
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	80 83       	st	Z, r24

	/* clear interrupt flag of to start operation*/
	TWCR = (1<<TWCR_TWINT)|(1<<TWCR_TWEN);
    2242:	e6 e5       	ldi	r30, 0x56	; 86
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	84 e8       	ldi	r24, 0x84	; 132
    2248:	80 83       	st	Z, r24

	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    224a:	e6 e5       	ldi	r30, 0x56	; 86
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	88 23       	and	r24, r24
    2252:	dc f7       	brge	.-10     	; 0x224a <TWI_MasterWriteData+0x1e>
	if((TWSR&0xf8)!=Master_WR_AC)
    2254:	e1 e2       	ldi	r30, 0x21	; 33
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	88 7f       	andi	r24, 0xF8	; 248
    2260:	90 70       	andi	r25, 0x00	; 0
    2262:	88 32       	cpi	r24, 0x28	; 40
    2264:	91 05       	cpc	r25, r1
    2266:	11 f0       	breq	.+4      	; 0x226c <TWI_MasterWriteData+0x40>
	{
		local_error=Master_WR_Err;
    2268:	85 e0       	ldi	r24, 0x05	; 5
    226a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error;
    226c:	89 81       	ldd	r24, Y+1	; 0x01

}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <TWI_MasterReadData>:
TWI_error TWI_MasterReadData(u8 *copy_u8Data)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <TWI_MasterReadData+0x6>
    227e:	0f 92       	push	r0
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9b 83       	std	Y+3, r25	; 0x03
    2286:	8a 83       	std	Y+2, r24	; 0x02
	TWI_error local_error=NO_error;
    2288:	19 82       	std	Y+1, r1	; 0x01
	/*enable master to generate AC*/
	//SET_BIT(TWCR,TWCR_TWEA);
	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    228a:	a6 e5       	ldi	r26, 0x56	; 86
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e6 e5       	ldi	r30, 0x56	; 86
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	84 60       	ori	r24, 0x04	; 4
    2296:	8c 93       	st	X, r24
	/* clear interrupt flag of to start operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    2298:	a6 e5       	ldi	r26, 0x56	; 86
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e6 e5       	ldi	r30, 0x56	; 86
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	80 68       	ori	r24, 0x80	; 128
    22a4:	8c 93       	st	X, r24
	/* wait until the falg is rised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    22a6:	e6 e5       	ldi	r30, 0x56	; 86
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	88 23       	and	r24, r24
    22ae:	dc f7       	brge	.-10     	; 0x22a6 <TWI_MasterReadData+0x2e>
	if((TWSR&0xf8)!=Master_RD_NAC)
    22b0:	e1 e2       	ldi	r30, 0x21	; 33
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	88 7f       	andi	r24, 0xF8	; 248
    22bc:	90 70       	andi	r25, 0x00	; 0
    22be:	88 35       	cpi	r24, 0x58	; 88
    22c0:	91 05       	cpc	r25, r1
    22c2:	19 f0       	breq	.+6      	; 0x22ca <TWI_MasterReadData+0x52>
	{
		local_error=Master_RD_Err;
    22c4:	86 e0       	ldi	r24, 0x06	; 6
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	06 c0       	rjmp	.+12     	; 0x22d6 <TWI_MasterReadData+0x5e>
	}
	else{
		/* Read the Recived data*/
		*copy_u8Data=TWDR;
    22ca:	e3 e2       	ldi	r30, 0x23	; 35
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	ea 81       	ldd	r30, Y+2	; 0x02
    22d2:	fb 81       	ldd	r31, Y+3	; 0x03
    22d4:	80 83       	st	Z, r24
	}


	return local_error;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01

}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
	/*generate  stop condition on the path */
	//SET_BIT(TWCR,TWCR_TWSTO);
	/* clear interrupt flag of to start operation*/
	//SET_BIT(TWCR,TWCR_TWINT);

	TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWSTO)|(1<<TWCR_TWEN);
    22ec:	e6 e5       	ldi	r30, 0x56	; 86
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	84 e9       	ldi	r24, 0x94	; 148
    22f2:	80 83       	st	Z, r24


}
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <enter_password>:
static u8 iter=0;



void enter_password(void)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	6e 97       	sbiw	r28, 0x1e	; 30
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61

	CLCD_voidGOTOXY(1, 0);
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	0e 94 04 0c 	call	0x1808	; 0x1808 <CLCD_voidGOTOXY>
	CLCD_voidSendCommand(Cursor_on); //command for turn on the cursor
    2316:	8e e0       	ldi	r24, 0x0E	; 14
    2318:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	u8 		Index=0;
    231c:	1e 8e       	std	Y+30, r1	; 0x1e

	while(1)
	{
		u8 KPD_u8press_key=0xff;
    231e:	8f ef       	ldi	r24, 0xFF	; 255
    2320:	8d 8f       	std	Y+29, r24	; 0x1d
    2322:	03 c0       	rjmp	.+6      	; 0x232a <enter_password+0x30>
		while(KPD_u8press_key == 0xff)
		{
			KPD_u8press_key=KPD_u8GetPressKey();
    2324:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <KPD_u8GetPressKey>
    2328:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 		Index=0;

	while(1)
	{
		u8 KPD_u8press_key=0xff;
		while(KPD_u8press_key == 0xff)
    232a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    232c:	8f 3f       	cpi	r24, 0xFF	; 255
    232e:	d1 f3       	breq	.-12     	; 0x2324 <enter_password+0x2a>
		{
			KPD_u8press_key=KPD_u8GetPressKey();
		}
		if(KPD_u8press_key== '=')
    2330:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2332:	8d 33       	cpi	r24, 0x3D	; 61
    2334:	09 f4       	brne	.+2      	; 0x2338 <enter_password+0x3e>
    2336:	8d c0       	rjmp	.+282    	; 0x2452 <enter_password+0x158>
		{
			break;
		}
		else
		{
			CLCD_voidNumber(KPD_u8press_key);
    2338:	8d 8d       	ldd	r24, Y+29	; 0x1d
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a0 e0       	ldi	r26, 0x00	; 0
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <CLCD_voidNumber>
			CLCD_voidCursorShift(lift);
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <CLCD_voidCursorShift>
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e2       	ldi	r26, 0x20	; 32
    2356:	b1 e4       	ldi	r27, 0x41	; 65
    2358:	89 8f       	std	Y+25, r24	; 0x19
    235a:	9a 8f       	std	Y+26, r25	; 0x1a
    235c:	ab 8f       	std	Y+27, r26	; 0x1b
    235e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2360:	69 8d       	ldd	r22, Y+25	; 0x19
    2362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	4a ef       	ldi	r20, 0xFA	; 250
    236e:	54 e4       	ldi	r21, 0x44	; 68
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	8d 8b       	std	Y+21, r24	; 0x15
    237a:	9e 8b       	std	Y+22, r25	; 0x16
    237c:	af 8b       	std	Y+23, r26	; 0x17
    237e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2380:	6d 89       	ldd	r22, Y+21	; 0x15
    2382:	7e 89       	ldd	r23, Y+22	; 0x16
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	5f e3       	ldi	r21, 0x3F	; 63
    2390:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2394:	88 23       	and	r24, r24
    2396:	2c f4       	brge	.+10     	; 0x23a2 <enter_password+0xa8>
		__ticks = 1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9c 8b       	std	Y+20, r25	; 0x14
    239e:	8b 8b       	std	Y+19, r24	; 0x13
    23a0:	3f c0       	rjmp	.+126    	; 0x2420 <enter_password+0x126>
	else if (__tmp > 65535)
    23a2:	6d 89       	ldd	r22, Y+21	; 0x15
    23a4:	7e 89       	ldd	r23, Y+22	; 0x16
    23a6:	8f 89       	ldd	r24, Y+23	; 0x17
    23a8:	98 8d       	ldd	r25, Y+24	; 0x18
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	3f ef       	ldi	r19, 0xFF	; 255
    23ae:	4f e7       	ldi	r20, 0x7F	; 127
    23b0:	57 e4       	ldi	r21, 0x47	; 71
    23b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b6:	18 16       	cp	r1, r24
    23b8:	4c f5       	brge	.+82     	; 0x240c <enter_password+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ba:	69 8d       	ldd	r22, Y+25	; 0x19
    23bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e2       	ldi	r20, 0x20	; 32
    23c8:	51 e4       	ldi	r21, 0x41	; 65
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
    23e2:	0f c0       	rjmp	.+30     	; 0x2402 <enter_password+0x108>
    23e4:	88 ec       	ldi	r24, 0xC8	; 200
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9a 8b       	std	Y+18, r25	; 0x12
    23ea:	89 8b       	std	Y+17, r24	; 0x11
    23ec:	89 89       	ldd	r24, Y+17	; 0x11
    23ee:	9a 89       	ldd	r25, Y+18	; 0x12
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <enter_password+0xf6>
    23f4:	9a 8b       	std	Y+18, r25	; 0x12
    23f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f8:	8b 89       	ldd	r24, Y+19	; 0x13
    23fa:	9c 89       	ldd	r25, Y+20	; 0x14
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	9c 8b       	std	Y+20, r25	; 0x14
    2400:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	69 f7       	brne	.-38     	; 0x23e4 <enter_password+0xea>
    240a:	14 c0       	rjmp	.+40     	; 0x2434 <enter_password+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240c:	6d 89       	ldd	r22, Y+21	; 0x15
    240e:	7e 89       	ldd	r23, Y+22	; 0x16
    2410:	8f 89       	ldd	r24, Y+23	; 0x17
    2412:	98 8d       	ldd	r25, Y+24	; 0x18
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	8b 89       	ldd	r24, Y+19	; 0x13
    2422:	9c 89       	ldd	r25, Y+20	; 0x14
    2424:	98 8b       	std	Y+16, r25	; 0x10
    2426:	8f 87       	std	Y+15, r24	; 0x0f
    2428:	8f 85       	ldd	r24, Y+15	; 0x0f
    242a:	98 89       	ldd	r25, Y+16	; 0x10
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <enter_password+0x132>
    2430:	98 8b       	std	Y+16, r25	; 0x10
    2432:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			CLCD_voidSendData('*');
    2434:	8a e2       	ldi	r24, 0x2A	; 42
    2436:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_voidSendData>
			password[Index]=KPD_u8press_key;
    243a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	fc 01       	movw	r30, r24
    2442:	e9 5e       	subi	r30, 0xE9	; 233
    2444:	fe 4f       	sbci	r31, 0xFE	; 254
    2446:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2448:	80 83       	st	Z, r24
			Index++;
    244a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	8e 8f       	std	Y+30, r24	; 0x1e
    2450:	66 cf       	rjmp	.-308    	; 0x231e <enter_password+0x24>
		}

	}
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a0 e2       	ldi	r26, 0x20	; 32
    2458:	b1 e4       	ldi	r27, 0x41	; 65
    245a:	8b 87       	std	Y+11, r24	; 0x0b
    245c:	9c 87       	std	Y+12, r25	; 0x0c
    245e:	ad 87       	std	Y+13, r26	; 0x0d
    2460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6b 85       	ldd	r22, Y+11	; 0x0b
    2464:	7c 85       	ldd	r23, Y+12	; 0x0c
    2466:	8d 85       	ldd	r24, Y+13	; 0x0d
    2468:	9e 85       	ldd	r25, Y+14	; 0x0e
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	8f 83       	std	Y+7, r24	; 0x07
    247c:	98 87       	std	Y+8, r25	; 0x08
    247e:	a9 87       	std	Y+9, r26	; 0x09
    2480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <enter_password+0x1aa>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <enter_password+0x228>
	else if (__tmp > 65535)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <enter_password+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <enter_password+0x20a>
    24e6:	88 ec       	ldi	r24, 0xC8	; 200
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9c 83       	std	Y+4, r25	; 0x04
    24ec:	8b 83       	std	Y+3, r24	; 0x03
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <enter_password+0x1f8>
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <enter_password+0x1ec>
    250c:	14 c0       	rjmp	.+40     	; 0x2536 <enter_password+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	6f 81       	ldd	r22, Y+7	; 0x07
    2510:	78 85       	ldd	r23, Y+8	; 0x08
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <enter_password+0x234>
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	CLCD_voidSendCommand(Cursor_off); //command for turn of the cursor
    2536:	8c e0       	ldi	r24, 0x0C	; 12
    2538:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	CLCD_ClearScreen();
    253c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <CLCD_ClearScreen>

}
    2540:	6e 96       	adiw	r28, 0x1e	; 30
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <Save_Password>:
void Save_Password(void)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	2e 97       	sbiw	r28, 0x0e	; 14
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendString("wait for saving....");
    2566:	80 e6       	ldi	r24, 0x60	; 96
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>

	for(iter=0;iter<4;iter++)
    256e:	10 92 16 01 	sts	0x0116, r1
    2572:	87 c0       	rjmp	.+270    	; 0x2682 <Save_Password+0x130>
	{
		EEPROM_voidWrite_Byte(password[iter], iter);
    2574:	80 91 16 01 	lds	r24, 0x0116
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	fc 01       	movw	r30, r24
    257e:	e9 5e       	subi	r30, 0xE9	; 233
    2580:	fe 4f       	sbci	r31, 0xFE	; 254
    2582:	90 81       	ld	r25, Z
    2584:	80 91 16 01 	lds	r24, 0x0116
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	89 2f       	mov	r24, r25
    258e:	b9 01       	movw	r22, r18
    2590:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <EEPROM_voidWrite_Byte>
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a8 ec       	ldi	r26, 0xC8	; 200
    259a:	b2 e4       	ldi	r27, 0x42	; 66
    259c:	8b 87       	std	Y+11, r24	; 0x0b
    259e:	9c 87       	std	Y+12, r25	; 0x0c
    25a0:	ad 87       	std	Y+13, r26	; 0x0d
    25a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a ef       	ldi	r20, 0xFA	; 250
    25b2:	54 e4       	ldi	r21, 0x44	; 68
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8f 83       	std	Y+7, r24	; 0x07
    25be:	98 87       	std	Y+8, r25	; 0x08
    25c0:	a9 87       	std	Y+9, r26	; 0x09
    25c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	2c f4       	brge	.+10     	; 0x25e6 <Save_Password+0x94>
		__ticks = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9e 83       	std	Y+6, r25	; 0x06
    25e2:	8d 83       	std	Y+5, r24	; 0x05
    25e4:	3f c0       	rjmp	.+126    	; 0x2664 <Save_Password+0x112>
	else if (__tmp > 65535)
    25e6:	6f 81       	ldd	r22, Y+7	; 0x07
    25e8:	78 85       	ldd	r23, Y+8	; 0x08
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	4c f5       	brge	.+82     	; 0x2650 <Save_Password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2600:	7c 85       	ldd	r23, Y+12	; 0x0c
    2602:	8d 85       	ldd	r24, Y+13	; 0x0d
    2604:	9e 85       	ldd	r25, Y+14	; 0x0e
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e2       	ldi	r20, 0x20	; 32
    260c:	51 e4       	ldi	r21, 0x41	; 65
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9e 83       	std	Y+6, r25	; 0x06
    2624:	8d 83       	std	Y+5, r24	; 0x05
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <Save_Password+0xf4>
    2628:	88 ec       	ldi	r24, 0xC8	; 200
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <Save_Password+0xe2>
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9e 83       	std	Y+6, r25	; 0x06
    2644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	9e 81       	ldd	r25, Y+6	; 0x06
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	69 f7       	brne	.-38     	; 0x2628 <Save_Password+0xd6>
    264e:	14 c0       	rjmp	.+40     	; 0x2678 <Save_Password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <Save_Password+0x11e>
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	89 83       	std	Y+1, r24	; 0x01
}
void Save_Password(void)
{
	CLCD_voidSendString("wait for saving....");

	for(iter=0;iter<4;iter++)
    2678:	80 91 16 01 	lds	r24, 0x0116
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	80 93 16 01 	sts	0x0116, r24
    2682:	80 91 16 01 	lds	r24, 0x0116
    2686:	84 30       	cpi	r24, 0x04	; 4
    2688:	08 f4       	brcc	.+2      	; 0x268c <Save_Password+0x13a>
    268a:	74 cf       	rjmp	.-280    	; 0x2574 <Save_Password+0x22>
	{
		EEPROM_voidWrite_Byte(password[iter], iter);
		_delay_ms(100);
	}
	CLCD_ClearScreen();
    268c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <CLCD_ClearScreen>

}
    2690:	2e 96       	adiw	r28, 0x0e	; 14
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <Check_password>:
u8   Check_password(void)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	60 97       	sbiw	r28, 0x10	; 16
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
	u8 return_value=1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	8f 87       	std	Y+15, r24	; 0x0f
	u8 local_value;

	for( iter=0;iter<4;iter++){
    26ba:	10 92 16 01 	sts	0x0116, r1
    26be:	8c c0       	rjmp	.+280    	; 0x27d8 <Check_password+0x136>

		EEPROM_voidRead_Byte(&local_value, iter);
    26c0:	80 91 16 01 	lds	r24, 0x0116
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	ce 01       	movw	r24, r28
    26ca:	40 96       	adiw	r24, 0x10	; 16
    26cc:	b9 01       	movw	r22, r18
    26ce:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <EEPROM_voidRead_Byte>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a0 e2       	ldi	r26, 0x20	; 32
    26d8:	b1 e4       	ldi	r27, 0x41	; 65
    26da:	8b 87       	std	Y+11, r24	; 0x0b
    26dc:	9c 87       	std	Y+12, r25	; 0x0c
    26de:	ad 87       	std	Y+13, r26	; 0x0d
    26e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	4a ef       	ldi	r20, 0xFA	; 250
    26f0:	54 e4       	ldi	r21, 0x44	; 68
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	8f 83       	std	Y+7, r24	; 0x07
    26fc:	98 87       	std	Y+8, r25	; 0x08
    26fe:	a9 87       	std	Y+9, r26	; 0x09
    2700:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	2c f4       	brge	.+10     	; 0x2724 <Check_password+0x82>
		__ticks = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	3f c0       	rjmp	.+126    	; 0x27a2 <Check_password+0x100>
	else if (__tmp > 65535)
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	3f ef       	ldi	r19, 0xFF	; 255
    2730:	4f e7       	ldi	r20, 0x7F	; 127
    2732:	57 e4       	ldi	r21, 0x47	; 71
    2734:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2738:	18 16       	cp	r1, r24
    273a:	4c f5       	brge	.+82     	; 0x278e <Check_password+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273c:	6b 85       	ldd	r22, Y+11	; 0x0b
    273e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2740:	8d 85       	ldd	r24, Y+13	; 0x0d
    2742:	9e 85       	ldd	r25, Y+14	; 0x0e
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e2       	ldi	r20, 0x20	; 32
    274a:	51 e4       	ldi	r21, 0x41	; 65
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	0f c0       	rjmp	.+30     	; 0x2784 <Check_password+0xe2>
    2766:	88 ec       	ldi	r24, 0xC8	; 200
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9c 83       	std	Y+4, r25	; 0x04
    276c:	8b 83       	std	Y+3, r24	; 0x03
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	9c 81       	ldd	r25, Y+4	; 0x04
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <Check_password+0xd0>
    2776:	9c 83       	std	Y+4, r25	; 0x04
    2778:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277a:	8d 81       	ldd	r24, Y+5	; 0x05
    277c:	9e 81       	ldd	r25, Y+6	; 0x06
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	9e 83       	std	Y+6, r25	; 0x06
    2782:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	69 f7       	brne	.-38     	; 0x2766 <Check_password+0xc4>
    278c:	14 c0       	rjmp	.+40     	; 0x27b6 <Check_password+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278e:	6f 81       	ldd	r22, Y+7	; 0x07
    2790:	78 85       	ldd	r23, Y+8	; 0x08
    2792:	89 85       	ldd	r24, Y+9	; 0x09
    2794:	9a 85       	ldd	r25, Y+10	; 0x0a
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	9a 81       	ldd	r25, Y+2	; 0x02
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <Check_password+0x10c>
    27b2:	9a 83       	std	Y+2, r25	; 0x02
    27b4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if(local_value!=password[iter]){
    27b6:	80 91 16 01 	lds	r24, 0x0116
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	fc 01       	movw	r30, r24
    27c0:	e9 5e       	subi	r30, 0xE9	; 233
    27c2:	fe 4f       	sbci	r31, 0xFE	; 254
    27c4:	90 81       	ld	r25, Z
    27c6:	88 89       	ldd	r24, Y+16	; 0x10
    27c8:	98 17       	cp	r25, r24
    27ca:	09 f0       	breq	.+2      	; 0x27ce <Check_password+0x12c>
			return_value=0;
    27cc:	1f 86       	std	Y+15, r1	; 0x0f
u8   Check_password(void)
{
	u8 return_value=1;
	u8 local_value;

	for( iter=0;iter<4;iter++){
    27ce:	80 91 16 01 	lds	r24, 0x0116
    27d2:	8f 5f       	subi	r24, 0xFF	; 255
    27d4:	80 93 16 01 	sts	0x0116, r24
    27d8:	80 91 16 01 	lds	r24, 0x0116
    27dc:	84 30       	cpi	r24, 0x04	; 4
    27de:	08 f4       	brcc	.+2      	; 0x27e2 <Check_password+0x140>
    27e0:	6f cf       	rjmp	.-290    	; 0x26c0 <Check_password+0x1e>
		}
		else{
			// do nothing
		}
	}
	return return_value;
    27e2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    27e4:	60 96       	adiw	r28, 0x10	; 16
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <First_password>:
void First_password(void)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	60 97       	sbiw	r28, 0x10	; 16
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
	u8 Check_value=0;
    280a:	18 8a       	std	Y+16, r1	; 0x10
	u8 index=3;
    280c:	83 e0       	ldi	r24, 0x03	; 3
    280e:	8f 87       	std	Y+15, r24	; 0x0f
    2810:	b2 c0       	rjmp	.+356    	; 0x2976 <First_password+0x180>
	while((!Check_value)&&(index>0)){

		CLCD_ClearScreen();
    2812:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <CLCD_ClearScreen>
		CLCD_voidSendString("Enter the password");
    2816:	84 e7       	ldi	r24, 0x74	; 116
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
		enter_password();
    281e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <enter_password>
		Save_Password();
    2822:	0e 94 a9 12 	call	0x2552	; 0x2552 <Save_Password>
		CLCD_ClearScreen();
    2826:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <CLCD_ClearScreen>
		CLCD_voidSendString("Confirm the password");
    282a:	87 e8       	ldi	r24, 0x87	; 135
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
		enter_password();
    2832:	0e 94 7d 11 	call	0x22fa	; 0x22fa <enter_password>
		Check_value=Check_password();
    2836:	0e 94 51 13 	call	0x26a2	; 0x26a2 <Check_password>
    283a:	88 8b       	std	Y+16, r24	; 0x10
		index--;
    283c:	8f 85       	ldd	r24, Y+15	; 0x0f
    283e:	81 50       	subi	r24, 0x01	; 1
    2840:	8f 87       	std	Y+15, r24	; 0x0f
		if((Check_value==0)&&(index>0)){
    2842:	88 89       	ldd	r24, Y+16	; 0x10
    2844:	88 23       	and	r24, r24
    2846:	09 f0       	breq	.+2      	; 0x284a <First_password+0x54>
    2848:	8e c0       	rjmp	.+284    	; 0x2966 <First_password+0x170>
    284a:	8f 85       	ldd	r24, Y+15	; 0x0f
    284c:	88 23       	and	r24, r24
    284e:	09 f4       	brne	.+2      	; 0x2852 <First_password+0x5c>
    2850:	8a c0       	rjmp	.+276    	; 0x2966 <First_password+0x170>
			CLCD_ClearScreen();
    2852:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <CLCD_ClearScreen>
			CLCD_voidSendString("password not match");
    2856:	8c e9       	ldi	r24, 0x9C	; 156
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
			CLCD_voidGOTOXY(1, 0);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	0e 94 04 0c 	call	0x1808	; 0x1808 <CLCD_voidGOTOXY>
			CLCD_voidNumber(index);
    2866:	8f 85       	ldd	r24, Y+15	; 0x0f
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	a0 e0       	ldi	r26, 0x00	; 0
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <CLCD_voidNumber>
			CLCD_voidSendString("trial left");
    2878:	8f ea       	ldi	r24, 0xAF	; 175
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	aa ef       	ldi	r26, 0xFA	; 250
    2886:	b3 e4       	ldi	r27, 0x43	; 67
    2888:	8b 87       	std	Y+11, r24	; 0x0b
    288a:	9c 87       	std	Y+12, r25	; 0x0c
    288c:	ad 87       	std	Y+13, r26	; 0x0d
    288e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2890:	6b 85       	ldd	r22, Y+11	; 0x0b
    2892:	7c 85       	ldd	r23, Y+12	; 0x0c
    2894:	8d 85       	ldd	r24, Y+13	; 0x0d
    2896:	9e 85       	ldd	r25, Y+14	; 0x0e
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a ef       	ldi	r20, 0xFA	; 250
    289e:	54 e4       	ldi	r21, 0x44	; 68
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	8f 83       	std	Y+7, r24	; 0x07
    28aa:	98 87       	std	Y+8, r25	; 0x08
    28ac:	a9 87       	std	Y+9, r26	; 0x09
    28ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b0:	6f 81       	ldd	r22, Y+7	; 0x07
    28b2:	78 85       	ldd	r23, Y+8	; 0x08
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	2c f4       	brge	.+10     	; 0x28d2 <First_password+0xdc>
		__ticks = 1;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	3f c0       	rjmp	.+126    	; 0x2950 <First_password+0x15a>
	else if (__tmp > 65535)
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	4c f5       	brge	.+82     	; 0x293c <First_password+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <First_password+0x13c>
    2914:	88 ec       	ldi	r24, 0xC8	; 200
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9c 83       	std	Y+4, r25	; 0x04
    291a:	8b 83       	std	Y+3, r24	; 0x03
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	9c 81       	ldd	r25, Y+4	; 0x04
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <First_password+0x12a>
    2924:	9c 83       	std	Y+4, r25	; 0x04
    2926:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9e 83       	std	Y+6, r25	; 0x06
    2930:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	9e 81       	ldd	r25, Y+6	; 0x06
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	69 f7       	brne	.-38     	; 0x2914 <First_password+0x11e>
    293a:	1d c0       	rjmp	.+58     	; 0x2976 <First_password+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	8d 83       	std	Y+5, r24	; 0x05
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	9a 83       	std	Y+2, r25	; 0x02
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <First_password+0x166>
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01
    2964:	08 c0       	rjmp	.+16     	; 0x2976 <First_password+0x180>
			_delay_ms(500);
		}
		else if(index==0){
    2966:	8f 85       	ldd	r24, Y+15	; 0x0f
    2968:	88 23       	and	r24, r24
    296a:	29 f4       	brne	.+10     	; 0x2976 <First_password+0x180>
			CLCD_voidSendString("reset the program");
    296c:	8a eb       	ldi	r24, 0xBA	; 186
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
    2974:	ff cf       	rjmp	.-2      	; 0x2974 <First_password+0x17e>
}
void First_password(void)
{
	u8 Check_value=0;
	u8 index=3;
	while((!Check_value)&&(index>0)){
    2976:	88 89       	ldd	r24, Y+16	; 0x10
    2978:	88 23       	and	r24, r24
    297a:	21 f4       	brne	.+8      	; 0x2984 <First_password+0x18e>
    297c:	8f 85       	ldd	r24, Y+15	; 0x0f
    297e:	88 23       	and	r24, r24
    2980:	09 f0       	breq	.+2      	; 0x2984 <First_password+0x18e>
    2982:	47 cf       	rjmp	.-370    	; 0x2812 <First_password+0x1c>
			CLCD_voidSendString("reset the program");
			while(1);
		}

	}
}
    2984:	60 96       	adiw	r28, 0x10	; 16
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <handl_password>:
void handl_password(void)
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	60 97       	sbiw	r28, 0x10	; 16
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
	u8 Check_value=0;
    29aa:	18 8a       	std	Y+16, r1	; 0x10
		u8 index=3;
    29ac:	83 e0       	ldi	r24, 0x03	; 3
    29ae:	8f 87       	std	Y+15, r24	; 0x0f
    29b0:	ab c0       	rjmp	.+342    	; 0x2b08 <handl_password+0x172>
		while((!Check_value)&&(index>0)){

			CLCD_ClearScreen();
    29b2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <CLCD_ClearScreen>
			CLCD_voidSendString("Enter the password");
    29b6:	84 e7       	ldi	r24, 0x74	; 116
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
			enter_password();
    29be:	0e 94 7d 11 	call	0x22fa	; 0x22fa <enter_password>
			Check_value=Check_password();
    29c2:	0e 94 51 13 	call	0x26a2	; 0x26a2 <Check_password>
    29c6:	88 8b       	std	Y+16, r24	; 0x10
			index--;
    29c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ca:	81 50       	subi	r24, 0x01	; 1
    29cc:	8f 87       	std	Y+15, r24	; 0x0f
			if((Check_value==0)&&(index>0)){
    29ce:	88 89       	ldd	r24, Y+16	; 0x10
    29d0:	88 23       	and	r24, r24
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <handl_password+0x40>
    29d4:	8e c0       	rjmp	.+284    	; 0x2af2 <handl_password+0x15c>
    29d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d8:	88 23       	and	r24, r24
    29da:	09 f4       	brne	.+2      	; 0x29de <handl_password+0x48>
    29dc:	8a c0       	rjmp	.+276    	; 0x2af2 <handl_password+0x15c>
				CLCD_ClearScreen();
    29de:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <CLCD_ClearScreen>
				CLCD_voidSendString("password Wrong");
    29e2:	8c ec       	ldi	r24, 0xCC	; 204
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
				CLCD_voidGOTOXY(1, 0);
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	0e 94 04 0c 	call	0x1808	; 0x1808 <CLCD_voidGOTOXY>
				CLCD_voidNumber(index);
    29f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f4:	88 2f       	mov	r24, r24
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	a0 e0       	ldi	r26, 0x00	; 0
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <CLCD_voidNumber>
				CLCD_voidSendString("trial left");
    2a04:	8f ea       	ldi	r24, 0xAF	; 175
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	aa ef       	ldi	r26, 0xFA	; 250
    2a12:	b3 e4       	ldi	r27, 0x43	; 67
    2a14:	8b 87       	std	Y+11, r24	; 0x0b
    2a16:	9c 87       	std	Y+12, r25	; 0x0c
    2a18:	ad 87       	std	Y+13, r26	; 0x0d
    2a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4a ef       	ldi	r20, 0xFA	; 250
    2a2a:	54 e4       	ldi	r21, 0x44	; 68
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	8f 83       	std	Y+7, r24	; 0x07
    2a36:	98 87       	std	Y+8, r25	; 0x08
    2a38:	a9 87       	std	Y+9, r26	; 0x09
    2a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3e:	78 85       	ldd	r23, Y+8	; 0x08
    2a40:	89 85       	ldd	r24, Y+9	; 0x09
    2a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <handl_password+0xc8>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	3f c0       	rjmp	.+126    	; 0x2adc <handl_password+0x146>
	else if (__tmp > 65535)
    2a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a60:	78 85       	ldd	r23, Y+8	; 0x08
    2a62:	89 85       	ldd	r24, Y+9	; 0x09
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	3f ef       	ldi	r19, 0xFF	; 255
    2a6a:	4f e7       	ldi	r20, 0x7F	; 127
    2a6c:	57 e4       	ldi	r21, 0x47	; 71
    2a6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a72:	18 16       	cp	r1, r24
    2a74:	4c f5       	brge	.+82     	; 0x2ac8 <handl_password+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <handl_password+0x128>
    2aa0:	88 ec       	ldi	r24, 0xC8	; 200
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
    2aa6:	8b 83       	std	Y+3, r24	; 0x03
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <handl_password+0x116>
    2ab0:	9c 83       	std	Y+4, r25	; 0x04
    2ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	69 f7       	brne	.-38     	; 0x2aa0 <handl_password+0x10a>
    2ac6:	20 c0       	rjmp	.+64     	; 0x2b08 <handl_password+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <handl_password+0x152>
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	0b c0       	rjmp	.+22     	; 0x2b08 <handl_password+0x172>
				_delay_ms(500);
			}
			else if(Check_value==1){
    2af2:	88 89       	ldd	r24, Y+16	; 0x10
    2af4:	81 30       	cpi	r24, 0x01	; 1
    2af6:	79 f0       	breq	.+30     	; 0x2b16 <handl_password+0x180>
				break;
			}
			else if(index==0){
    2af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2afa:	88 23       	and	r24, r24
    2afc:	29 f4       	brne	.+10     	; 0x2b08 <handl_password+0x172>
				CLCD_voidSendString("reset the program");
    2afe:	8a eb       	ldi	r24, 0xBA	; 186
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
    2b06:	ff cf       	rjmp	.-2      	; 0x2b06 <handl_password+0x170>
}
void handl_password(void)
{
	u8 Check_value=0;
		u8 index=3;
		while((!Check_value)&&(index>0)){
    2b08:	88 89       	ldd	r24, Y+16	; 0x10
    2b0a:	88 23       	and	r24, r24
    2b0c:	21 f4       	brne	.+8      	; 0x2b16 <handl_password+0x180>
    2b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b10:	88 23       	and	r24, r24
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <handl_password+0x180>
    2b14:	4e cf       	rjmp	.-356    	; 0x29b2 <handl_password+0x1c>
				CLCD_voidSendString("reset the program");
				while(1);
			}

		}
}
    2b16:	60 96       	adiw	r28, 0x10	; 16
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <map>:
#include "STD_types.h"

#include "map.h"

s32 map(s32 input_min,s32 input_max,s32 outmin,s32 outmax,s32  input)
{
    2b28:	af 92       	push	r10
    2b2a:	bf 92       	push	r11
    2b2c:	cf 92       	push	r12
    2b2e:	df 92       	push	r13
    2b30:	ef 92       	push	r14
    2b32:	ff 92       	push	r15
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	64 97       	sbiw	r28, 0x14	; 20
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	f8 94       	cli
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	cd bf       	out	0x3d, r28	; 61
    2b4c:	6d 83       	std	Y+5, r22	; 0x05
    2b4e:	7e 83       	std	Y+6, r23	; 0x06
    2b50:	8f 83       	std	Y+7, r24	; 0x07
    2b52:	98 87       	std	Y+8, r25	; 0x08
    2b54:	29 87       	std	Y+9, r18	; 0x09
    2b56:	3a 87       	std	Y+10, r19	; 0x0a
    2b58:	4b 87       	std	Y+11, r20	; 0x0b
    2b5a:	5c 87       	std	Y+12, r21	; 0x0c
    2b5c:	ed 86       	std	Y+13, r14	; 0x0d
    2b5e:	fe 86       	std	Y+14, r15	; 0x0e
    2b60:	0f 87       	std	Y+15, r16	; 0x0f
    2b62:	18 8b       	std	Y+16, r17	; 0x10
    2b64:	a9 8a       	std	Y+17, r10	; 0x11
    2b66:	ba 8a       	std	Y+18, r11	; 0x12
    2b68:	cb 8a       	std	Y+19, r12	; 0x13
    2b6a:	dc 8a       	std	Y+20, r13	; 0x14
	s32 output=0;
    2b6c:	19 82       	std	Y+1, r1	; 0x01
    2b6e:	1a 82       	std	Y+2, r1	; 0x02
    2b70:	1b 82       	std	Y+3, r1	; 0x03
    2b72:	1c 82       	std	Y+4, r1	; 0x04
	output= ((input-input_min)*(outmax-outmin))/(input_max-input_min)+outmin;
    2b74:	29 a1       	ldd	r18, Y+33	; 0x21
    2b76:	3a a1       	ldd	r19, Y+34	; 0x22
    2b78:	4b a1       	ldd	r20, Y+35	; 0x23
    2b7a:	5c a1       	ldd	r21, Y+36	; 0x24
    2b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b80:	af 81       	ldd	r26, Y+7	; 0x07
    2b82:	b8 85       	ldd	r27, Y+8	; 0x08
    2b84:	79 01       	movw	r14, r18
    2b86:	8a 01       	movw	r16, r20
    2b88:	e8 1a       	sub	r14, r24
    2b8a:	f9 0a       	sbc	r15, r25
    2b8c:	0a 0b       	sbc	r16, r26
    2b8e:	1b 0b       	sbc	r17, r27
    2b90:	29 89       	ldd	r18, Y+17	; 0x11
    2b92:	3a 89       	ldd	r19, Y+18	; 0x12
    2b94:	4b 89       	ldd	r20, Y+19	; 0x13
    2b96:	5c 89       	ldd	r21, Y+20	; 0x14
    2b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b9c:	af 85       	ldd	r26, Y+15	; 0x0f
    2b9e:	b8 89       	ldd	r27, Y+16	; 0x10
    2ba0:	28 1b       	sub	r18, r24
    2ba2:	39 0b       	sbc	r19, r25
    2ba4:	4a 0b       	sbc	r20, r26
    2ba6:	5b 0b       	sbc	r21, r27
    2ba8:	c8 01       	movw	r24, r16
    2baa:	b7 01       	movw	r22, r14
    2bac:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__mulsi3>
    2bb0:	7b 01       	movw	r14, r22
    2bb2:	8c 01       	movw	r16, r24
    2bb4:	29 85       	ldd	r18, Y+9	; 0x09
    2bb6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bb8:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bba:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc0:	af 81       	ldd	r26, Y+7	; 0x07
    2bc2:	b8 85       	ldd	r27, Y+8	; 0x08
    2bc4:	28 1b       	sub	r18, r24
    2bc6:	39 0b       	sbc	r19, r25
    2bc8:	4a 0b       	sbc	r20, r26
    2bca:	5b 0b       	sbc	r21, r27
    2bcc:	c8 01       	movw	r24, r16
    2bce:	b7 01       	movw	r22, r14
    2bd0:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__divmodsi4>
    2bd4:	da 01       	movw	r26, r20
    2bd6:	c9 01       	movw	r24, r18
    2bd8:	9c 01       	movw	r18, r24
    2bda:	ad 01       	movw	r20, r26
    2bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be0:	af 85       	ldd	r26, Y+15	; 0x0f
    2be2:	b8 89       	ldd	r27, Y+16	; 0x10
    2be4:	82 0f       	add	r24, r18
    2be6:	93 1f       	adc	r25, r19
    2be8:	a4 1f       	adc	r26, r20
    2bea:	b5 1f       	adc	r27, r21
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	ab 83       	std	Y+3, r26	; 0x03
    2bf2:	bc 83       	std	Y+4, r27	; 0x04
	return output;
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	ab 81       	ldd	r26, Y+3	; 0x03
    2bfa:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	64 96       	adiw	r28, 0x14	; 20
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	1f 91       	pop	r17
    2c12:	0f 91       	pop	r16
    2c14:	ff 90       	pop	r15
    2c16:	ef 90       	pop	r14
    2c18:	df 90       	pop	r13
    2c1a:	cf 90       	pop	r12
    2c1c:	bf 90       	pop	r11
    2c1e:	af 90       	pop	r10
    2c20:	08 95       	ret

00002c22 <main>:
#include "login.h"
#include <util/delay.h>


void main()
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	2f 97       	sbiw	r28, 0x0f	; 15
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
	u8 local_val=0;
    2c36:	1f 86       	std	Y+15, r1	; 0x0f
	PORT_voidInti();
    2c38:	0e 94 09 10 	call	0x2012	; 0x2012 <PORT_voidInti>
	CLCD_voidInit();
    2c3c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <CLCD_voidInit>
	TWI_voidMasterInt(0);
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_voidMasterInt>
	/**************some code*********/


	while(1)
	{
		EEPROM_voidRead_Byte(&local_val, 0);
    2c46:	ce 01       	movw	r24, r28
    2c48:	0f 96       	adiw	r24, 0x0f	; 15
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <EEPROM_voidRead_Byte>
		if(local_val==0xff)
    2c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c54:	8f 3f       	cpi	r24, 0xFF	; 255
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <main+0x38>
    2c58:	7b c0       	rjmp	.+246    	; 0x2d50 <main+0x12e>
		{
			CLCD_voidSendString("hello user");
    2c5a:	8b ed       	ldi	r24, 0xDB	; 219
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	aa e7       	ldi	r26, 0x7A	; 122
    2c68:	b4 e4       	ldi	r27, 0x44	; 68
    2c6a:	8b 87       	std	Y+11, r24	; 0x0b
    2c6c:	9c 87       	std	Y+12, r25	; 0x0c
    2c6e:	ad 87       	std	Y+13, r26	; 0x0d
    2c70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a ef       	ldi	r20, 0xFA	; 250
    2c80:	54 e4       	ldi	r21, 0x44	; 68
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	8f 83       	std	Y+7, r24	; 0x07
    2c8c:	98 87       	std	Y+8, r25	; 0x08
    2c8e:	a9 87       	std	Y+9, r26	; 0x09
    2c90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c92:	6f 81       	ldd	r22, Y+7	; 0x07
    2c94:	78 85       	ldd	r23, Y+8	; 0x08
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e8       	ldi	r20, 0x80	; 128
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca6:	88 23       	and	r24, r24
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <main+0x92>
		__ticks = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9e 83       	std	Y+6, r25	; 0x06
    2cb0:	8d 83       	std	Y+5, r24	; 0x05
    2cb2:	3f c0       	rjmp	.+126    	; 0x2d32 <main+0x110>
	else if (__tmp > 65535)
    2cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb6:	78 85       	ldd	r23, Y+8	; 0x08
    2cb8:	89 85       	ldd	r24, Y+9	; 0x09
    2cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	3f ef       	ldi	r19, 0xFF	; 255
    2cc0:	4f e7       	ldi	r20, 0x7F	; 127
    2cc2:	57 e4       	ldi	r21, 0x47	; 71
    2cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	4c f5       	brge	.+82     	; 0x2d1e <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <main+0xf2>
    2cf6:	88 ec       	ldi	r24, 0xC8	; 200
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	9c 83       	std	Y+4, r25	; 0x04
    2cfc:	8b 83       	std	Y+3, r24	; 0x03
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	9c 81       	ldd	r25, Y+4	; 0x04
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <main+0xe0>
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9e 83       	std	Y+6, r25	; 0x06
    2d12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <main+0xd4>
    2d1c:	14 c0       	rjmp	.+40     	; 0x2d46 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d20:	78 85       	ldd	r23, Y+8	; 0x08
    2d22:	89 85       	ldd	r24, Y+9	; 0x09
    2d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9e 83       	std	Y+6, r25	; 0x06
    2d30:	8d 83       	std	Y+5, r24	; 0x05
    2d32:	8d 81       	ldd	r24, Y+5	; 0x05
    2d34:	9e 81       	ldd	r25, Y+6	; 0x06
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <main+0x11c>
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			CLCD_ClearScreen();
    2d46:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <CLCD_ClearScreen>

			First_password();
    2d4a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <First_password>
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <main+0x132>
		}
		else
		{
			handl_password();
    2d50:	0e 94 cb 14 	call	0x2996	; 0x2996 <handl_password>
		}
		CLCD_ClearScreen();
    2d54:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <CLCD_ClearScreen>
		CLCD_voidSendString("the system open");
    2d58:	86 ee       	ldi	r24, 0xE6	; 230
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <CLCD_voidSendString>
    2d60:	ff cf       	rjmp	.-2      	; 0x2d60 <main+0x13e>

00002d62 <__mulsi3>:
    2d62:	62 9f       	mul	r22, r18
    2d64:	d0 01       	movw	r26, r0
    2d66:	73 9f       	mul	r23, r19
    2d68:	f0 01       	movw	r30, r0
    2d6a:	82 9f       	mul	r24, r18
    2d6c:	e0 0d       	add	r30, r0
    2d6e:	f1 1d       	adc	r31, r1
    2d70:	64 9f       	mul	r22, r20
    2d72:	e0 0d       	add	r30, r0
    2d74:	f1 1d       	adc	r31, r1
    2d76:	92 9f       	mul	r25, r18
    2d78:	f0 0d       	add	r31, r0
    2d7a:	83 9f       	mul	r24, r19
    2d7c:	f0 0d       	add	r31, r0
    2d7e:	74 9f       	mul	r23, r20
    2d80:	f0 0d       	add	r31, r0
    2d82:	65 9f       	mul	r22, r21
    2d84:	f0 0d       	add	r31, r0
    2d86:	99 27       	eor	r25, r25
    2d88:	72 9f       	mul	r23, r18
    2d8a:	b0 0d       	add	r27, r0
    2d8c:	e1 1d       	adc	r30, r1
    2d8e:	f9 1f       	adc	r31, r25
    2d90:	63 9f       	mul	r22, r19
    2d92:	b0 0d       	add	r27, r0
    2d94:	e1 1d       	adc	r30, r1
    2d96:	f9 1f       	adc	r31, r25
    2d98:	bd 01       	movw	r22, r26
    2d9a:	cf 01       	movw	r24, r30
    2d9c:	11 24       	eor	r1, r1
    2d9e:	08 95       	ret

00002da0 <__udivmodsi4>:
    2da0:	a1 e2       	ldi	r26, 0x21	; 33
    2da2:	1a 2e       	mov	r1, r26
    2da4:	aa 1b       	sub	r26, r26
    2da6:	bb 1b       	sub	r27, r27
    2da8:	fd 01       	movw	r30, r26
    2daa:	0d c0       	rjmp	.+26     	; 0x2dc6 <__udivmodsi4_ep>

00002dac <__udivmodsi4_loop>:
    2dac:	aa 1f       	adc	r26, r26
    2dae:	bb 1f       	adc	r27, r27
    2db0:	ee 1f       	adc	r30, r30
    2db2:	ff 1f       	adc	r31, r31
    2db4:	a2 17       	cp	r26, r18
    2db6:	b3 07       	cpc	r27, r19
    2db8:	e4 07       	cpc	r30, r20
    2dba:	f5 07       	cpc	r31, r21
    2dbc:	20 f0       	brcs	.+8      	; 0x2dc6 <__udivmodsi4_ep>
    2dbe:	a2 1b       	sub	r26, r18
    2dc0:	b3 0b       	sbc	r27, r19
    2dc2:	e4 0b       	sbc	r30, r20
    2dc4:	f5 0b       	sbc	r31, r21

00002dc6 <__udivmodsi4_ep>:
    2dc6:	66 1f       	adc	r22, r22
    2dc8:	77 1f       	adc	r23, r23
    2dca:	88 1f       	adc	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	1a 94       	dec	r1
    2dd0:	69 f7       	brne	.-38     	; 0x2dac <__udivmodsi4_loop>
    2dd2:	60 95       	com	r22
    2dd4:	70 95       	com	r23
    2dd6:	80 95       	com	r24
    2dd8:	90 95       	com	r25
    2dda:	9b 01       	movw	r18, r22
    2ddc:	ac 01       	movw	r20, r24
    2dde:	bd 01       	movw	r22, r26
    2de0:	cf 01       	movw	r24, r30
    2de2:	08 95       	ret

00002de4 <__divmodsi4>:
    2de4:	97 fb       	bst	r25, 7
    2de6:	09 2e       	mov	r0, r25
    2de8:	05 26       	eor	r0, r21
    2dea:	0e d0       	rcall	.+28     	; 0x2e08 <__divmodsi4_neg1>
    2dec:	57 fd       	sbrc	r21, 7
    2dee:	04 d0       	rcall	.+8      	; 0x2df8 <__divmodsi4_neg2>
    2df0:	d7 df       	rcall	.-82     	; 0x2da0 <__udivmodsi4>
    2df2:	0a d0       	rcall	.+20     	; 0x2e08 <__divmodsi4_neg1>
    2df4:	00 1c       	adc	r0, r0
    2df6:	38 f4       	brcc	.+14     	; 0x2e06 <__divmodsi4_exit>

00002df8 <__divmodsi4_neg2>:
    2df8:	50 95       	com	r21
    2dfa:	40 95       	com	r20
    2dfc:	30 95       	com	r19
    2dfe:	21 95       	neg	r18
    2e00:	3f 4f       	sbci	r19, 0xFF	; 255
    2e02:	4f 4f       	sbci	r20, 0xFF	; 255
    2e04:	5f 4f       	sbci	r21, 0xFF	; 255

00002e06 <__divmodsi4_exit>:
    2e06:	08 95       	ret

00002e08 <__divmodsi4_neg1>:
    2e08:	f6 f7       	brtc	.-4      	; 0x2e06 <__divmodsi4_exit>
    2e0a:	90 95       	com	r25
    2e0c:	80 95       	com	r24
    2e0e:	70 95       	com	r23
    2e10:	61 95       	neg	r22
    2e12:	7f 4f       	sbci	r23, 0xFF	; 255
    2e14:	8f 4f       	sbci	r24, 0xFF	; 255
    2e16:	9f 4f       	sbci	r25, 0xFF	; 255
    2e18:	08 95       	ret

00002e1a <__prologue_saves__>:
    2e1a:	2f 92       	push	r2
    2e1c:	3f 92       	push	r3
    2e1e:	4f 92       	push	r4
    2e20:	5f 92       	push	r5
    2e22:	6f 92       	push	r6
    2e24:	7f 92       	push	r7
    2e26:	8f 92       	push	r8
    2e28:	9f 92       	push	r9
    2e2a:	af 92       	push	r10
    2e2c:	bf 92       	push	r11
    2e2e:	cf 92       	push	r12
    2e30:	df 92       	push	r13
    2e32:	ef 92       	push	r14
    2e34:	ff 92       	push	r15
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	ca 1b       	sub	r28, r26
    2e44:	db 0b       	sbc	r29, r27
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	09 94       	ijmp

00002e52 <__epilogue_restores__>:
    2e52:	2a 88       	ldd	r2, Y+18	; 0x12
    2e54:	39 88       	ldd	r3, Y+17	; 0x11
    2e56:	48 88       	ldd	r4, Y+16	; 0x10
    2e58:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e60:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e62:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e64:	b9 84       	ldd	r11, Y+9	; 0x09
    2e66:	c8 84       	ldd	r12, Y+8	; 0x08
    2e68:	df 80       	ldd	r13, Y+7	; 0x07
    2e6a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e6c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e6e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e70:	1b 81       	ldd	r17, Y+3	; 0x03
    2e72:	aa 81       	ldd	r26, Y+2	; 0x02
    2e74:	b9 81       	ldd	r27, Y+1	; 0x01
    2e76:	ce 0f       	add	r28, r30
    2e78:	d1 1d       	adc	r29, r1
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	ed 01       	movw	r28, r26
    2e86:	08 95       	ret

00002e88 <_exit>:
    2e88:	f8 94       	cli

00002e8a <__stop_program>:
    2e8a:	ff cf       	rjmp	.-2      	; 0x2e8a <__stop_program>
